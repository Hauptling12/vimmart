<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Power Management on vimmart</title>
    <link>https://hauptling12.github.io/vimmart/tags/power-management/</link>
    <description>Recent content in Power Management on vimmart</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 24 Oct 2022 15:03:53 +1000</lastBuildDate><atom:link href="https://hauptling12.github.io/vimmart/tags/power-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laptop Power Management</title>
      <link>https://hauptling12.github.io/vimmart/posts/laptop-power-management/</link>
      <pubDate>Mon, 24 Oct 2022 15:03:53 +1000</pubDate>
      
      <guid>https://hauptling12.github.io/vimmart/posts/laptop-power-management/</guid>
      <description>&lt;p&gt;Power management is a critical thing to understand in laptops. It&amp;rsquo;s possible to buy an expensive laptop and end up not using it because of bad power management practices.&lt;/p&gt;
&lt;p&gt;Things that effect battery life&lt;/p&gt;
&lt;blockquote&gt;
- Frequency adjustment makes massive battery difference.
- You can turn of CPU cores independently
- Intel P-States are a bit unpredictable.
- eGPUs will always drain a battery faster than just APU laptops.
&lt;/blockquote&gt;
&lt;p&gt;Also, not taking care of the thermals on a laptop will lead to less laptop life, shorter battery, and unpleasant heat generation.&lt;/p&gt;
&lt;h2 id=&#34;cooling-pad&#34;&gt;Cooling Pad&lt;/h2&gt;
&lt;p&gt;Get any cheap amazon cooling pad from amazon. Here is a decent $30 one with lots of reviews. &lt;a href=&#34;https://amzn.to/3SV0Y0l&#34;&gt;https://amzn.to/3SV0Y0l&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;redo-thermal-paste&#34;&gt;Redo Thermal Paste&lt;/h2&gt;
&lt;p&gt;By default, almost any and every laptop has excessive thermal compound which leads to higher temperatures. Simply removing the excess compound and apply just a drop of &amp;ldquo;good&amp;rdquo; thermal paste will drop temps by about 10 Celsius.&lt;/p&gt;
&lt;p&gt;Here is an example of excess factory thermal compound application:
&lt;img src=&#34;https://hauptling12.github.io/vimmart/images/thermal.jpg&#34; alt=&#34;termal&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;adjust-max-cpu-frequency&#34;&gt;Adjust Max CPU Frequency&lt;/h2&gt;
&lt;p&gt;Set your CPU governor to the maximum power it can use. I NEVER use a 100% of the CPU and in most instances rarely break above 50% of its total power. Typically, around 2 GHz is perfect for my day-to-day work. When working on battery, I put this down to 25% on a beefy laptop to conserve most of its power. On weaker laptops, you&amp;rsquo;d probably double these numbers. 100% on AC Power and 50% on Battery.&lt;/p&gt;
&lt;h3 id=&#34;linux---cpupower&#34;&gt;Linux - cpupower&lt;/h3&gt;
&lt;h4 id=&#34;required-dependencies&#34;&gt;Required Dependencies&lt;/h4&gt;
&lt;p&gt;Install the following packages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpupower&lt;/li&gt;
&lt;li&gt;acpi-support&lt;/li&gt;
&lt;li&gt;acpid&lt;/li&gt;
&lt;li&gt;acpi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example Install:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;apt-get install acpi-support acpid acpi linux-cpupower cpufrequtils
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;setting-minmax-power-example&#34;&gt;Setting Min/Max Power Example&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpupower frequency-set -g powersave -d 0.8G -u 1.2G
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;check-frequency&#34;&gt;Check Frequency&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpufreq-info
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;disable-turbo&#34;&gt;Disable Turbo&lt;/h3&gt;
&lt;p&gt;Turbo will draw more power and reduce battery life while increasing CPU temperature.&lt;/p&gt;
&lt;p&gt;Run the following from a root user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;echo 1 &amp;gt; /sys/devices/system/cpu/intel_pstate/no_turbo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;turn-off-cpu-cores&#34;&gt;Turn off CPU Cores&lt;/h3&gt;
&lt;p&gt;The more CPU cores that your laptop uses, the power it will draw. On higher end laptops you can see as big as a 75% savings and extend the battery life x3.&lt;/p&gt;
&lt;p&gt;Taking a CPU core offline (&lt;em&gt;Note: you can&amp;rsquo;t offline cpu0&lt;/em&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;echo 0 &amp;gt; /sys/devices/system/cpu/cpu#/online
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To disable cores above 4 threads, run the following in a bash script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for ((i=4;i&amp;lt;$(nproc);i++)); do echo 0 &amp;gt; /sys/devices/system/cpu/cpu$i/online; done
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;use-cpulimit-to-constrain-apps&#34;&gt;Use CPULIMIT to Constrain Apps&lt;/h3&gt;
&lt;h4 id=&#34;install&#34;&gt;Install&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install cpulimit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;adjust-exec-commands-in-desktop&#34;&gt;Adjust EXEC commands in .desktop&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpulimit --limit 70 /usr/bin/google-chrome-bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: This would limit CPU usage for Google Chrome to 70%&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux---adjust-gpu-power&#34;&gt;Linux - adjust GPU power&lt;/h3&gt;
&lt;p&gt;There are two methods for adjusting the power usage your GPU uses. I personally use both depending on the laptop, but eGPU&amp;rsquo;s will eat up a battery laptop in no time.&lt;/p&gt;
&lt;h4 id=&#34;manually-adjust-mhz-of-gpu&#34;&gt;Manually adjust MHz of GPU&lt;/h4&gt;
&lt;p&gt;Set the following variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/sys/class/drm/card0/gt_max_freq_mhz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/sys/class/drm/card0/gt_boost_freq_mhz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using cat to display current MHz and then simply echo the new lower value to these variables.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;echo &amp;#34;1000&amp;#34; &amp;gt; /sys/class/drm/card0/gt_max_freq_mhz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;turning-off-gpu-with-prime-select&#34;&gt;Turning off GPU with Prime-select&lt;/h4&gt;
&lt;p&gt;While there are technically 3 options, I recommend only using NVIDIA and intel, as on-demand doesn&amp;rsquo;t work very well.&lt;/p&gt;
&lt;h4 id=&#34;turning-off-gpu-with-envycontrol&#34;&gt;Turning off GPU with Envycontrol&lt;/h4&gt;
&lt;p&gt;Cool python project that rebuilds the init system to exclude nvidia.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/geminis3/EnvyControl&#34;&gt;https://github.com/geminis3/EnvyControl&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;windows---gui-power-management&#34;&gt;Windows - GUI Power Management&lt;/h3&gt;
&lt;p&gt;Launch the GUI power panel with Start â‡¾ Run &lt;code&gt;powercfg.cpl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hauptling12.github.io/vimmart/images/win-power.png&#34; alt=&#34;win-power&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then change the Min / Max CPU Power. I typically set these to 5% Min and 50% Max, but on weaker laptops you can set these higher.&lt;/p&gt;
&lt;h3 id=&#34;windows---autohotkey-script&#34;&gt;Windows - AutoHotkey Script&lt;/h3&gt;
&lt;p&gt;This script sets the max CPU state when plugged in to the wall (AC Power) and when it runs on battery (DC Power).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PowerWriteProcessorStateValueIndex(50, &amp;#34;AC&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PowerWriteProcessorStateValueIndex(25, &amp;#34;DC&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ExitApp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PowerWriteProcessorStateValueIndex(Max := &amp;#34;&amp;#34;, Mode := &amp;#34;&amp;#34;) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	l:=PowerEnumeratePlans(ActivePlan), VarSetCapacity(GUID_ACTIVE_POWER_SAVING, 16, 0), VarSetCapacity(GUID_PROCESSOR_SETTINGS_SUBGROUP, 16, 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, DllCall(&amp;#34;Ole32.dll\CLSIDFromString&amp;#34;, &amp;#34;WStr&amp;#34;, &amp;#34;{&amp;#34; ActivePlan.GUID &amp;#34;}&amp;#34;, &amp;#34;Ptr&amp;#34;, &amp;amp;GUID_ACTIVE_POWER_SAVING), VarSetCapacity(GUID_PROCESSOR_THROTTLE_MAXIMUM, 16, 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, DllCall(&amp;#34;Ole32.dll\CLSIDFromString&amp;#34;, &amp;#34;WStr&amp;#34;, &amp;#34;{54533251-82be-4824-96c1-47b60b740d00}&amp;#34;, &amp;#34;Ptr&amp;#34;, &amp;amp;GUID_PROCESSOR_SETTINGS_SUBGROUP)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, DllCall(&amp;#34;Ole32.dll\CLSIDFromString&amp;#34;, &amp;#34;WStr&amp;#34;, &amp;#34;{BC5038F7-23E0-4960-96DA-33ABAF5935EC}&amp;#34;, &amp;#34;Ptr&amp;#34;, &amp;amp;GUID_PROCESSOR_THROTTLE_MAXIMUM)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, DllCall(&amp;#34;PowrProf.dll\PowerWrite&amp;#34; Mode &amp;#34;ValueIndex&amp;#34;, &amp;#34;Ptr&amp;#34;, 0, &amp;#34;Ptr&amp;#34;, &amp;amp;GUID_ACTIVE_POWER_SAVING
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, &amp;#34;Ptr&amp;#34;, &amp;amp;GUID_PROCESSOR_SETTINGS_SUBGROUP, &amp;#34;Ptr&amp;#34;, &amp;amp;GUID_PROCESSOR_THROTTLE_MAXIMUM, &amp;#34;UInt&amp;#34;, Max, &amp;#34;UInt&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	for k, v in l
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		if !(v.Default) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			RunWait, % ComSpec &amp;#34; /c powercfg /s &amp;#34; v.GUID,, Hide
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			break
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		} RunWait, % ComSpec &amp;#34; /c powercfg /s &amp;#34; ActivePlan.GUID,, Hide
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;;enumerates all power plans
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;;for k, v in PowerEnumeratePlans()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;;	MsgBox % &amp;#34;#&amp;#34; k &amp;#34;`nGUID: &amp;#34; v.GUID &amp;#34;`Name: &amp;#34; v.Name &amp;#34;`nDefault?: &amp;#34; v.Default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PowerEnumeratePlans(ByRef ActivePlan := &amp;#34;&amp;#34;) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	List := {}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	for k, v in StrSplit(CMD(&amp;#34;powercfg /l&amp;#34;), &amp;#34;:&amp;#34;, A_Space A_Tab)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		if (A_Index&amp;gt;1) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			Info := {}, Info.GUID := SubStr(Trim(v), 1, 36), Info.Default := !!InStr(v, &amp;#34;*&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			, Info.Name := Trim(StrSplit(SubStr(v, InStr(v, &amp;#34;(&amp;#34;)+1), &amp;#34;)&amp;#34;)[1]), List.Push(Info)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			if (Info.Default)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				ActivePlan := Info
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		} return List
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;;executes cmd command and return the result
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CMD(CMD := &amp;#34;&amp;#34;, Encoding := &amp;#34;UTF-8&amp;#34;, ByRef ExitCode := &amp;#34;&amp;#34;) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	DllCall(&amp;#34;Kernel32.dll\CreatePipe&amp;#34;, &amp;#34;PtrP&amp;#34;, hReadPipe, &amp;#34;PtrP&amp;#34;, hWritePipe, &amp;#34;Ptr&amp;#34;, 0, &amp;#34;UInt&amp;#34;, 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, DllCall(&amp;#34;Kernel32.dll\SetHandleInformation&amp;#34;, &amp;#34;Ptr&amp;#34;, hWritePipe, &amp;#34;UInt&amp;#34;, 1, &amp;#34;UInt&amp;#34;, 1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, Size := VarSetCapacity(STARTUPINFO, A_PtrSize=4?68:104, 0), NumPut(Size, STARTUPINFO, 0, &amp;#34;UInt&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    , NumPut(0x100, STARTUPINFO, A_PtrSize=4?44:60, &amp;#34;UInt&amp;#34;), NumPut(hStdInRd, STARTUPINFO, A_PtrSize=4?56:80, &amp;#34;Ptr&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    , NumPut(hWritePipe, STARTUPINFO, A_PtrSize=4?60:88, &amp;#34;Ptr&amp;#34;), NumPut(hWritePipe, STARTUPINFO, A_PtrSize=4?64:96, &amp;#34;Ptr&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, pi := CreateProcess(, ComSpec &amp;#34; /c &amp;#34; CMD,,,, 0x08000000,,, &amp;amp;STARTUPINFO)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, DllCall(&amp;#34;Kernel32.dll\CloseHandle&amp;#34;, &amp;#34;Ptr&amp;#34;, hWritePipe), Size := VarSetCapacity(Buff, 4095)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	while DllCall(&amp;#34;Kernel32.dll\ReadFile&amp;#34;, &amp;#34;Ptr&amp;#34;, hReadPipe, &amp;#34;Ptr&amp;#34;, &amp;amp;Buff, &amp;#34;UInt&amp;#34;, Size, &amp;#34;PtrP&amp;#34;, Bytes, &amp;#34;Ptr&amp;#34;, 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        OutputVar .= StrGet(&amp;amp;Buff, Bytes, Encoding)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	DllCall(&amp;#34;Kernel32.dll\CloseHandle&amp;#34;, &amp;#34;Ptr&amp;#34;, pi.handle), DllCall(&amp;#34;Kernel32.dll\CloseHandle&amp;#34;, &amp;#34;Ptr&amp;#34;, hReadPipe)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	return OutputVar, DllCall(&amp;#34;Kernel32.dll\GetExitCodeProcess&amp;#34;, &amp;#34;Ptr&amp;#34;, pi.handle, &amp;#34;UIntP&amp;#34;, ExitCode)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} CreateProcess(ApplicationName := &amp;#34;&amp;#34;, ByRef CommandLine := &amp;#34;&amp;#34;, ProcessAttributes := 0, ThreadAttributes := 0, InheritHandles := true, CreationFlags := 0x08000000, Environment := 0, CurrentDirectory := &amp;#34;&amp;#34;, StartupInfo := 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	VarSetCapacity(PROCESS_INFORMATION, A_PtrSize=4?16:24, 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, r := DllCall(&amp;#34;Kernel32.dll\CreateProcess&amp;#34;, &amp;#34;Ptr&amp;#34;, ApplicationName=&amp;#34;&amp;#34;?0:&amp;amp;ApplicationName, &amp;#34;Ptr&amp;#34;, CommandLine=&amp;#34;&amp;#34;?0:&amp;amp;CommandLine
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, &amp;#34;Ptr&amp;#34;, ProcessAttributes, &amp;#34;Ptr&amp;#34;, ThreadAttributes, &amp;#34;Int&amp;#34;, !!InheritHandles, &amp;#34;UInt&amp;#34;, CreationFlags, &amp;#34;Ptr&amp;#34;, Environment, &amp;#34;Ptr&amp;#34;, CurrentDirectory=&amp;#34;&amp;#34;?0:&amp;amp;CurrentDirectory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, &amp;#34;Ptr&amp;#34;, StartupInfo, &amp;#34;Ptr&amp;#34;, &amp;amp;PROCESS_INFORMATION)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	return r?{HANDLE: NumGet(PROCESS_INFORMATION, 0, &amp;#34;Ptr&amp;#34;), hThread: NumGet(PROCESS_INFORMATION, A_PtrSize, &amp;#34;Ptr&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	, ID: NumGet(PROCESS_INFORMATION, A_PtrSize=4?8:16, &amp;#34;Ptr&amp;#34;), ThreadID: NumGet(PROCESS_INFORMATION, A_PtrSize=4?12:24, &amp;#34;Ptr&amp;#34;)}:0, ErrorLevel := !r
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
