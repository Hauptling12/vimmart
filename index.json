[{"categories":["Linux"],"contents":"This brief guide explains how to fix Busybox Initramfs error on Linux. I am using Ubuntu 20.04 LTS as my daily driver on my Dell Inspiron laptop. Today I turned it on and the boot process dropped to the BusyBox shell and I ended up at the initramfs prompt. As far as I can remember, I did nothing wrong. I didn\u0026rsquo;t forcibly power off it. It was working just fine yesterday! When I switched it on today, I landed in the BusyBox shell:\nBusyBox v1.30.1 (Ubuntu 1:1.30.1-4ubuntu6.1) built-in shell (ash) Enter \u0026#39;help\u0026#39; for a list of built-in commands. (initramfs) I can\u0026rsquo;t get past this screen. Also it doesn\u0026rsquo;t show what exactly the problem is. All I see is just a blank busybox shell.\nI wasn\u0026rsquo;t sure what to do at this point. So I simply passed the exit command to see what happens.\nAnd then I saw the actual error:\n(initramfs) exit /dev/sda1 contains a file system with errors, check forced. Inode 4326476 extent tree (at level 1) could be narrower, IGNORED. /dev/sda1: Inode 4326843 extent tree (at level 1) could be narrower, IGNORED. /dev/sda1: Inode 4327012 extent tree (at level 1) could be narrower, IGNORED. /dev/sda1: Inode 4329004 extent tree (at level 1) could be narrower, IGNORED. /dev/sda1: Inodes that were part of a corrupted orphan linked list found. /dev/sda1: UNEXPECTED INCONSISTENCY; RUN fsck MANUALLY. (i.e., without -a or -p options) fsck exited with status code 4. The root filesystem on /dev/sda1 requires a manual fsck. BusyBox v1.30.1 (Ubuntu 1:1.30.1-4ubuntu6.1) built-in shell (ash) Enter \u0026#39;help\u0026#39; for a list of built-in commands. (initramfs) As you can see in the above output, the /dev/sda1 partition is corrupted. The file system in this partition has some errors. If you ever encountered with this type of problem, you need to check and repair the problematic Linux filesystems with fsck command.\nPlease note that sometimes you don\u0026rsquo;t see any errors after typing the exit command. In that case, try to run fsck on all filesystems.\nFor those wondering, BusyBox is software suite that provides many common UNIX utilities into a single small executable. It provides replacements for most of the utilities you usually find in GNU fileutils, shellutils, etc.\nInitramfs is an initial ram file system based on tmpfs. It contains the tools and scripts required to mount the file systems before the init binary on the real root file system is called.\nFix Busybox Initramfs Error On Ubuntu Linux To solve initramfs error on Ubuntu Linux, you need to repair the filesystem in the corrupted partition using fsck command like below: (initramfs) fsck /dev/sda1 -y Replace /dev/sda1 with your partition name. In your system, it could be /dev/sdb1, /dev/sdc1 etc. You can use cat /proc/partitions or blkid commands to get your Linux partition details in Busybox.\nNow the fsck command will start to fix all bad blocks automatically in the filesystem. After a couple minutes, you will see an output like below:\n/dev/sda1: ***** FILE SYSTEM WAS MODIFIED ***** /dev/sda1: 497733/30531584 files (1.5% non-contiguous), ........ Next, type reboot and hit ENTER to restart your system! (initramfs) reboot If the reboot command doesn\u0026rsquo;t work, type exit and hit ENTER.\nCross your fingers and wait for the system to reboot! If all went well, your system will boot normally without any problem.\nThese steps helped me and many others (see the comment section below) to solve Busybox Initramfs error on Ubuntu Linux operating system. If you are stuck in initramfs prompt, this guide will definitely help.\nHeads Up: If you keep getting this error often, probably your hard disk is getting weaker. In that case, it is recommended to backup the data and replace the hard disk as soon as possible.\nIf your Ubuntu system is crashed due to power failure or network connectivity issue in the middle of the upgrade process, you might end up with broken Ubuntu. In that case, you can easily fix broken Ubuntu without reinstalling it as described in the following guide.\n","permalink":"https://hauptling12.github.io/vimmart/posts/how-to-fix-busybox-initramfs-error-on-ubuntu/","tags":["busybox"],"title":"How to Fix Busybox Initramfs Error on linux"},{"categories":["Linux"],"contents":"The Linux \u0026ldquo;tar\u0026rdquo; stands for tape archive, which is used by a large number of Linux/Unix system administrators to deal with tape drive backup in Linux.\nThe tar command is used to rip a collection of files and directories into a highly compressed archive file commonly called tarball or tar, gzip and bzip in Linux.\nThe tar is the most widely used command to create compressed archive files that can be moved easily from one disk to another disk or machine to machine.\nIn this article, we will be going to review and discuss various tar command examples including how to create archive files using (tar, tar.gz, and tar.bz2) compression, how to extract archive files, extract a single file, view the content of the file, verify a file, add files or directories to the existing archive file, estimate the size of tar archive file, etc.\nThe main purpose of this guide is to provide various tar command examples that might be helpful for you to understand and become an expert in tar archive manipulation.\n1. Create a tar Archive File in Linux The below example of the tar command will create a tar archive file vimmart-14-09-12.tar for a directory /home/vimmart in the current working directory.\nSee the example of the tar command in action.\n# tar -cvf vimmart-14-09-12.tar /home/vimmart/ /home/vimmart/ /home/vimmart/cleanfiles.sh /home/vimmart/openvpn-2.1.4.tar.gz /home/vimmart/vimmart-14-09-12.tar /home/vimmart/phpmyadmin-2.11.11.3-1.el5.rf.noarch.rpm /home/vimmart/rpmforge-release-0.5.2-2.el5.rf.i386.rpm Let\u0026rsquo;s discuss each option used in the above tar command to create a tar archive file.\nc \u0026ndash; Creates a new .tar archive file. v \u0026ndash; Verbosely show the .tar file progress. f \u0026ndash; File name type of the archive file. 2. Create tar.gz Archive File in Linux To create a compressed gzip archive file we use the option z. For example, the below command will create a compressed MyImages-14-09-12.tar.gz file for the directory /home/MyImages. (Note: tar.gz and tgz both are similar).\n# tar cvzf MyImages-14-09-12.tar.gz /home/MyImages OR # tar cvzf MyImages-14-09-12.tgz /home/MyImages /home/MyImages/ /home/MyImages/Sara-Khan-and-model-Priyanka-Shah.jpg /home/MyImages/RobertKristenviolent101201.jpg /home/MyImages/Justintimerlake101125.jpg /home/MyImages/Mileyphoto101203.jpg /home/MyImages/JenniferRobert101130.jpg /home/MyImages/katrinabarbiedoll231110.jpg /home/MyImages/the-japanese-wife-press-conference.jpg /home/MyImages/ReesewitherspoonCIA101202.jpg /home/MyImages/yanaguptabaresf231110.jpg 3. Create tar.bz2 Archive File in Linux The bz2 feature compresses and creates an archive file less than the size of the gzip. The bz2 compression takes more time to compress and decompress files than gzip, which takes less time.\nTo create a highly compressed tar file we use the option j. The following example command will create a Phpfiles-org.tar.bz2 file for a directory /home/php. (Note: tar.bz2 and tbz is similar to tb2).\n# tar cvfj Phpfiles-org.tar.bz2 /home/php OR # tar cvfj Phpfiles-org.tar.tbz /home/php OR # tar cvfj Phpfiles-org.tar.tb2 /home/php /home/php/ /home/php/iframe_ew.php /home/php/videos_all.php /home/php/rss.php /home/php/index.php /home/php/vendor.php /home/php/video_title.php /home/php/report.php /home/php/object.html /home/php/video.php 4. Untar tar Archive File in Linux To untar or extract a tar file, just issue the following command using option x (extract). For example, the below command will untar the file public_html-14-09-12.tar in the present working directory.\nIf you want to untar in a different directory then use option as -C (specified directory).\n## Untar files in Current Directory ## # tar -xvf public_html-14-09-12.tar ## Untar files in specified Directory ## # tar -xvf public_html-14-09-12.tar -C /home/public_html/videos/ /home/public_html/videos/ /home/public_html/videos/views.php /home/public_html/videos/index.php /home/public_html/videos/logout.php /home/public_html/videos/all_categories.php /home/public_html/videos/feeds.xml 5. Uncompress tar.gz Archive File in Linux To uncompress the tar.gz archive file, just run the following command. If we would like to untar in different directories, just use option -C and the directory path, as shown in the above example.\n# tar -xvf thumbnails-14-09-12.tar.gz /home/public_html/videos/thumbnails/ /home/public_html/videos/thumbnails/katdeepika231110.jpg /home/public_html/videos/thumbnails/katrinabarbiedoll231110.jpg /home/public_html/videos/thumbnails/onceuponatime101125.jpg /home/public_html/videos/thumbnails/playbutton.png /home/public_html/videos/thumbnails/ReesewitherspoonCIA101202.jpg /home/public_html/videos/thumbnails/snagItNarration.jpg /home/public_html/videos/thumbnails/Minissha-Lamba.jpg /home/public_html/videos/thumbnails/Lindsaydance101201.jpg /home/public_html/videos/thumbnails/Mileyphoto101203.jpg 6. Uncompress tar.bz2 Archive File in Linux To uncompress the highly compressed tar.bz2 file, just use the following command. The below example command will untar all the .flv files from the archive file.\n# tar -xvf videos-14-09-12.tar.bz2 /home/public_html/videos/flv/katrinabarbiedoll231110.flv /home/public_html/videos/flv/BrookmuellerCIA101125.flv /home/public_html/videos/flv/dollybackinbb4101125.flv /home/public_html/videos/flv/JenniferRobert101130.flv /home/public_html/videos/flv/JustinAwardmovie101125.flv /home/public_html/videos/flv/Lakme-Fashion-Week.flv /home/public_html/videos/flv/Mileyphoto101203.flv /home/public_html/videos/flv/Minissha-Lamba.flv 7. List Content of tar Archive File in Linux To list the contents of the tar archive file, just run the following command with option t (list content). The below command will list the content of the uploadprogress.tar file.\n# tar -tvf uploadprogress.tar -rw-r--r-- chregu/staff 2276 2011-08-15 18:51:10 package2.xml -rw-r--r-- chregu/staff 7877 2011-08-15 18:51:10 uploadprogress/examples/index.php -rw-r--r-- chregu/staff 1685 2011-08-15 18:51:10 uploadprogress/examples/server.php -rw-r--r-- chregu/staff 1697 2011-08-15 18:51:10 uploadprogress/examples/info.php -rw-r--r-- chregu/staff 367 2011-08-15 18:51:10 uploadprogress/config.m4 -rw-r--r-- chregu/staff 303 2011-08-15 18:51:10 uploadprogress/config.w32 -rw-r--r-- chregu/staff 3563 2011-08-15 18:51:10 uploadprogress/php_uploadprogress.h -rw-r--r-- chregu/staff 15433 2011-08-15 18:51:10 uploadprogress/uploadprogress.c -rw-r--r-- chregu/staff 1433 2011-08-15 18:51:10 package.xml 8. List Content tar.gz Archive File in Linux Use the following command to list the content of the tar.gz file.\n# tar -tvf staging.vimmart.com.tar.gz -rw-r--r-- root/root 0 2012-08-30 04:03:57 staging.vimmart.com-access_log -rw-r--r-- root/root 587 2012-08-29 18:35:12 staging.vimmart.com-access_log.1 -rw-r--r-- root/root 156 2012-01-21 07:17:56 staging.vimmart.com-access_log.2 -rw-r--r-- root/root 156 2011-12-21 11:30:56 staging.vimmart.com-access_log.3 -rw-r--r-- root/root 156 2011-11-20 17:28:24 staging.vimmart.com-access_log.4 -rw-r--r-- root/root 0 2012-08-30 04:03:57 staging.vimmart.com-error_log -rw-r--r-- root/root 3981 2012-08-29 18:35:12 staging.vimmart.com-error_log.1 -rw-r--r-- root/root 211 2012-01-21 07:17:56 staging.vimmart.com-error_log.2 -rw-r--r-- root/root 211 2011-12-21 11:30:56 staging.vimmart.com-error_log.3 -rw-r--r-- root/root 211 2011-11-20 17:28:24 staging.vimmart.com-error_log.4 9. List Content tar.bz2 Archive File in Linux To list the content of the tar.bz2 file, issue the following command.\n# tar -tvf Phpfiles-org.tar.bz2 drwxr-xr-x root/root 0 2012-09-15 03:06:08 /home/php/ -rw-r--r-- root/root 1751 2012-09-15 03:06:08 /home/php/iframe_ew.php -rw-r--r-- root/root 11220 2012-09-15 03:06:08 /home/php/videos_all.php -rw-r--r-- root/root 2152 2012-09-15 03:06:08 /home/php/rss.php -rw-r--r-- root/root 3021 2012-09-15 03:06:08 /home/php/index.php -rw-r--r-- root/root 2554 2012-09-15 03:06:08 /home/php/vendor.php -rw-r--r-- root/root 406 2012-09-15 03:06:08 /home/php/video_title.php -rw-r--r-- root/root 4116 2012-09-15 03:06:08 /home/php/report.php -rw-r--r-- root/root 1273 2012-09-15 03:06:08 /home/php/object.html 10. Untar Single file from tar File in Linux To extract a single file called cleanfiles.sh from cleanfiles.sh.tar use the following command.\n# tar -xvf cleanfiles.sh.tar cleanfiles.sh OR # tar --extract --file=cleanfiles.sh.tar cleanfiles.sh cleanfiles.sh 11. Untar Single file from tar.gz File in Linux To extract a single file vimmartbackup.xml from the vimmartbackup.tar.gz archive file, use the command as follows.\n# tar -zxvf vimmartbackup.tar.gz vimmartbackup.xml OR # tar --extract --file=vimmartbackup.tar.gz vimmartbackup.xml vimmartbackup.xml 12. Untar Single file from tar.bz2 File in Linux To extract a single file called index.php from the file Phpfiles-org.tar.bz2 use the following option.\n# tar -jxvf Phpfiles-org.tar.bz2 home/php/index.php OR # tar --extract --file=Phpfiles-org.tar.bz2 /home/php/index.php /home/php/index.php 13. Untar Multiple files from tar, tar.gz, and tar.bz2 File To extract or untar multiple files from the tar, tar.gz, and tar.bz2 archive files. For example, the below command will extract \u0026ldquo;file 1\u0026rdquo; and \u0026ldquo;file 2\u0026rdquo; from the archive files.\n# tar -xvf vimmart-14-09-12.tar \u0026#34;file1\u0026#34; \u0026#34;file2\u0026#34; # tar -zxvf MyImages-14-09-12.tar.gz \u0026#34;file1\u0026#34; \u0026#34;file2\u0026#34; # tar -jxvf Phpfiles-org.tar.bz2 \u0026#34;file1\u0026#34; \u0026#34;file2\u0026#34; 14. Extract Group of Files using Wildcard in Linux To extract a group of files we use wildcard-based extracting. For example, to extract a group of all files whose pattern begins with .php from a tar, tar.gz, and tar.bz2 archive file.\n# tar -xvf Phpfiles-org.tar --wildcards \u0026#39;*.php\u0026#39; # tar -zxvf Phpfiles-org.tar.gz --wildcards \u0026#39;*.php\u0026#39; # tar -jxvf Phpfiles-org.tar.bz2 --wildcards \u0026#39;*.php\u0026#39; /home/php/iframe_ew.php /home/php/videos_all.php /home/php/rss.php /home/php/index.php /home/php/vendor.php /home/php/video_title.php /home/php/report.php /home/php/video.php 15. Add Files or Directories to tar Archive File in Linux To add files or directories to the existing tar archive files we use the option r (append). For example, we add file xyz.txt and directory php to the existing vimmart-14-09-12.tar archive file.\n# tar -rvf vimmart-14-09-12.tar xyz.txt # tar -rvf vimmart-14-09-12.tar php drwxr-xr-x root/root 0 2012-09-15 02:24:21 home/vimmart/ -rw-r--r-- root/root 15740615 2012-09-15 02:23:42 home/vimmart/cleanfiles.sh -rw-r--r-- root/root 863726 2012-09-15 02:23:41 home/vimmart/openvpn-2.1.4.tar.gz -rw-r--r-- root/root 21063680 2012-09-15 02:24:21 home/vimmart/vimmart-14-09-12.tar -rw-r--r-- root/root 4437600 2012-09-15 02:23:41 home/vimmart/phpmyadmin-2.11.11.3-1.el5.rf.noarch.rpm -rw-r--r-- root/root 12680 2012-09-15 02:23:41 home/vimmart/rpmforge-release-0.5.2-2.el5.rf.i386.rpm -rw-r--r-- root/root 0 2012-08-18 19:11:04 xyz.txt drwxr-xr-x root/root 0 2012-09-15 03:06:08 php/ -rw-r--r-- root/root 1751 2012-09-15 03:06:08 php/iframe_ew.php -rw-r--r-- root/root 11220 2012-09-15 03:06:08 php/videos_all.php -rw-r--r-- root/root 2152 2012-09-15 03:06:08 php/rss.php -rw-r--r-- root/root 3021 2012-09-15 03:06:08 php/index.php -rw-r--r-- root/root 2554 2012-09-15 03:06:08 php/vendor.php -rw-r--r-- root/root 406 2012-09-15 03:06:08 php/video_title.php 16. Add Files or Directories to tar.gz and tar.bz2 Files The tar command doesn\u0026rsquo;t have an option to add files or directories to an existing compressed tar.gz and tar.bz2 archive file. If we do try will get the following error.\n# tar -rvf MyImages-14-09-12.tar.gz xyz.txt # tar -rvf Phpfiles-org.tar.bz2 xyz.txt tar: This does not look like a tar archive tar: Skipping to next header xyz.txt tar: Error exit delayed from previous errors 17. How To Verify tar, tar.gz, and tar.bz2 Archive File To verify any tar or compressed archived file we use the option W (verify). To do this, just use the following examples of commands. (Note: You cannot do verification on a compressed ( *.tar.gz, *.tar.bz2 ) archive file).\n# tar tvfW vimmart-14-09-12.tar tar: This does not look like a tar archive tar: Skipping to next header tar: Archive contains obsolescent base-64 headers tar: VERIFY FAILURE: 30740 invalid headers detected Verify -rw-r--r-- root/root 863726 2012-09-15 02:23:41 /home/vimmart/openvpn-2.1.4.tar.gz Verify -rw-r--r-- root/root 21063680 2012-09-15 02:24:21 /home/vimmart/vimmart-14-09-12.tar tar: /home/vimmart/vimmart-14-09-12.tar: Warning: Cannot stat: No such file or directory Verify -rw-r--r-- root/root 4437600 2012-09-15 02:23:41 home/vimmart/phpmyadmin-2.11.11.3-1.el5.rf.noarch.rpm tar: /home/vimmart/phpmyadmin-2.11.11.3-1.el5.rf.noarch.rpm: Warning: Cannot stat: No such file or directory Verify -rw-r--r-- root/root 12680 2012-09-15 02:23:41 home/vimmart/rpmforge-release-0.5.2-2.el5.rf.i386.rpm tar: /home/vimmart/rpmforge-release-0.5.2-2.el5.rf.i386.rpm: Warning: Cannot stat: No such file or directory Verify -rw-r--r-- root/root 0 2012-08-18 19:11:04 xyz.txt Verify drwxr-xr-x root/root 0 2012-09-15 03:06:08 php/ 18. Check the Size of the tar, tar.gz, and tar.bz2 Archive File To check the size of any tar, tar.gz, and tar.bz2 archive file, use the following command. For example, the below command will display the size of the archive file in Kilobytes (KB).\n# tar -czf - vimmart-14-09-12.tar | wc -c 12820480 # tar -czf - MyImages-14-09-12.tar.gz | wc -c 112640 # tar -czf - Phpfiles-org.tar.bz2 | wc -c 20480 19. Exclude Files and Directories When Creating Tar File To exclude certain files and directories while creating a tar.gz file, you can use the following command with the --exclude an option that will exclude files and directories when creating the tar archive file as shown.\n# tar --exclude=\u0026#39;file1.txt\u0026#39; -zcvf backup.tar.gz /home/vimmart # tar --exclude=\u0026#39;/home/vimmart/uploads\u0026#39; -zcvf backup.tar.gz /home/vimmart In the above command, we excluded file \u0026lsquo;file1.txt\u0026rsquo; and \u0026lsquo;uploads\u0026rsquo; directory from the /home/vimmart folder.\nTo exclude files with specific file extensions (.txt) when creating a tar archive file, use:\n# tar --exclude=\u0026#39;*.txt\u0026#39; -zcvf backup.tar.gz /home/vimmart 20. Remove File and Directory from Tar Archive The following tar command will remove a file or directory from the already created tar file using the --delete option as shown.\n# tar --delete -f backup.tar.gz file1.txt # tar --delete -f backup.tar.gz \u0026#39;/home/vimmart/uploads\u0026#39; 21. Extract Specific File Extension in Tar Archive The following tar command will only extract files with the specific extension .png from the tar archive file using the --wildcards option as shown.\n# tar -xvf backup.tar.gz --wildcards \u0026#39;*.png\u0026#39; 22. Useful tar Command Usage and Options -c \u0026ndash; create an archive file. -x \u0026ndash; extract an archive file. -v \u0026ndash; show the progress of the archive file. -f \u0026ndash; filename of the archive file. -t \u0026ndash; viewing the content of the archive file. -u \u0026ndash; archives and adds to an existing archive file. -j \u0026ndash; filter archive through bzip2. -z \u0026ndash; filter archive through gzip. -r \u0026ndash; append or update files or directories to the existing archive files. -W \u0026ndash; Verify an archive file. -A \u0026ndash; concatenates the archive files. --wildcards \u0026ndash; Specify patterns in the UNIX tar command. --exclude \u0026ndash; excludes file and directory when creating the archive. --delete \u0026ndash; remove file and directory from the archive. ","permalink":"https://hauptling12.github.io/vimmart/posts/18-tar-command-examples-in-linux/","tags":["CLI","shell"],"title":"21 Tar Command Examples in Linux"},{"categories":["Linux"],"contents":"Today, we are going to take a look inside the /proc directory and develop a familiarity with it. The /proc directory is present on all Linux systems, regardless of flavor or architecture.\nOne misconception that we have to immediately clear up is that the /proc directory is NOT a real File System, in the sense of the term. It is a Virtual File System. Contained within the procfs are information about processes and other system information. It is mapped to /proc and mounted at boot time.\nFirst, lets get into the /proc directory and have a look around:\ncd /proc The first thing that you will notice is that there are some familiar sounding files, and then a whole bunch of numbered directories. The numbered directories represent processes, better known as PIDs, and within them, a command that occupies them. The files contain system information such as memory (meminfo), CPU information (cpuinfo), and available filesystems.\nLet’s take a look at one of the files first:\n# cat /proc/meminfo Sample Output which returns something similar to this:\nMemTotal: 604340 kB MemFree: 54240 kB Buffers: 18700 kB Cached: 369020 kB SwapCached: 0 kB Active: 312556 kB Inactive: 164856 kB Active(anon): 89744 kB Inactive(anon): 360 kB Active(file): 222812 kB Inactive(file): 164496 kB Unevictable: 0 kB Mlocked: 0 kB SwapTotal: 0 kB SwapFree: 0 kB Dirty: 0 kB Writeback: 0 kB AnonPages: 89724 kB Mapped: 18012 kB Shmem: 412 kB Slab: 50104 kB SReclaimable: 40224 kB ... As you can see, /proc/meminfo contains a bunch of information about your system’s memory, including the total amount available (in kb) and the amount free on the top two lines.\nRunning the cat command on any of the files in /proc will output their contents. Information about any files is available in the man page by running:\n# man 5 /proc/\u0026lt;filename\u0026gt; I will give you quick rundown on /proc’s files:\n/proc/cmdline – Kernel command line information. /proc/console – Information about current consoles including tty. /proc/devices – Device drivers currently configured for the running kernel. /proc/dma – Info about current DMA channels. /proc/fb – Framebuffer devices. /proc/filesystems – Current filesystems supported by the kernel. /proc/iomem – Current system memory map for devices. /proc/ioports – Registered port regions for input output communication with device. /proc/loadavg – System load average. /proc/locks – Files currently locked by kernel. /proc/meminfo – Info about system memory (see above example). /proc/misc – Miscellaneous drivers registered for miscellaneous major device. /proc/modules – Currently loaded kernel modules. /proc/mounts – List of all mounts in use by system. /proc/partitions – Detailed info about partitions available to the system. /proc/pci – Information about every PCI device. /proc/stat – Record or various statistics kept from last reboot. /proc/swap – Information about swap space. /proc/uptime – Uptime information (in seconds). /proc/version – Kernel version, gcc version, and Linux distribution installed. Within /proc’s numbered directories you will find a few files and links. Remember that these directories’ numbers correlate to the PID of the command being run within them. Let’s use an example. On my system, there is a folder name /proc/12:\n# cd /proc/12 # ls Sample Output attr coredump_filter io mounts oom_score_adj smaps wchan autogroup cpuset latency mountstats pagemap stack auxv cwd limits net personality stat cgroup environ loginuid ns root statm clear_refs exe maps numa_maps sched status cmdline fd mem oom_adj schedstat syscall comm fdinfo mountinfo oom_score sessionid task If I run:\n# cat /proc/12/status I get the following:\nName:\txenwatch State:\tS (sleeping) Tgid:\t12 Pid:\t12 PPid:\t2 TracerPid:\t0 Uid:\t0\t0\t0\t0 Gid:\t0\t0\t0\t0 FDSize:\t64 Groups: Threads:\t1 SigQ:\t1/4592 SigPnd:\t0000000000000000 ShdPnd:\t0000000000000000 SigBlk:\t0000000000000000 SigIgn:\tffffffffffffffff SigCgt:\t0000000000000000 CapInh:\t0000000000000000 CapPrm:\tffffffffffffffff CapEff:\tffffffffffffffff CapBnd:\tffffffffffffffff Cpus_allowed:\t1 Cpus_allowed_list:\t0 Mems_allowed:\t00000000,00000001 Mems_allowed_list:\t0 voluntary_ctxt_switches:\t84 nonvoluntary_ctxt_switches:\t0 So, what does this mean? Well, the important part is at the top. We can see from the status file that this process belongs to xenwatch. Its current state is sleeping, and its process ID is 12, obviously. We also can see who is running this, as UID and GID are 0, indicating that this process belongs to the root user.\nIn any numbered directory, you will have a similar file structure. The most important ones, and their descriptions, are as follows:\ncmdline – command line of the process environ – environmental variables fd – file descriptors limits – contains information about the limits of the process mounts – related information You will also notice a number of links in the numbered directory:\ncwd – a link to the current working directory of the process exe – link to the executable of the process root – link to the work directory of the process ","permalink":"https://hauptling12.github.io/vimmart/posts/exploring-proc-file-system-in-linux/","tags":["CLI","files"],"title":"Exploring /proc File System in Linux"},{"categories":["Linux","Networking"],"contents":"ifconfig in short “interface configuration” utility for system/network administration in Unix/Linux operating systems to configure, manage and query network interface parameters via command-line interface or in a system configuration scripts.\nThis article covers “15 Useful “ifconfig” Commands” with their practical examples, which might be very helpful to you in managing and configuring network interfaces in Linux systems.\nUpdate: The networking command ifconfig is deprecated and replaced by the ip command in most Linux distributions.\n1. View All Network Interface Settings The “ifconfig” command with no arguments will display all the active interfaces details. The ifconfig command is also used to check the assigned IP address of a server.\n[root@hauptling ~]# ifconfig eth0 Link encap:Ethernet HWaddr 00:0B:CD:1C:18:5A inet addr:172.16.25.126 Bcast:172.16.25.63 Mask:255.255.255.224 inet6 addr: fe80::20b:cdff:fe1c:185a/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:2341604 errors:0 dropped:0 overruns:0 frame:0 TX packets:2217673 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:293460932 (279.8 MiB) TX bytes:1042006549 (993.7 MiB) Interrupt:185 Memory:f7fe0000-f7ff0000 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:16436 Metric:1 RX packets:5019066 errors:0 dropped:0 overruns:0 frame:0 TX packets:5019066 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:2174522634 (2.0 GiB) TX bytes:2174522634 (2.0 GiB) tun0 Link encap:UNSPEC HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 inet addr:10.1.1.1 P-t-P:10.1.1.2 Mask:255.255.255.255 UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1500 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:100 RX bytes:0 (0.0 b) TX bytes:0 (0.0 b) 2. Display Information of All Network Interfaces The following ifconfig command with the -a argument will display information of all active or inactive network interfaces on the server. It displays the results for eth0, lo, sit0 and tun0.\n[root@hauptling ~]# ifconfig -a eth0 Link encap:Ethernet HWaddr 00:0B:CD:1C:18:5A inet addr:172.16.25.126 Bcast:172.16.25.63 Mask:255.255.255.224 inet6 addr: fe80::20b:cdff:fe1c:185a/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:2344927 errors:0 dropped:0 overruns:0 frame:0 TX packets:2220777 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:293839516 (280.2 MiB) TX bytes:1043722206 (995.3 MiB) Interrupt:185 Memory:f7fe0000-f7ff0000 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:16436 Metric:1 RX packets:5022927 errors:0 dropped:0 overruns:0 frame:0 TX packets:5022927 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:2175739488 (2.0 GiB) TX bytes:2175739488 (2.0 GiB) sit0 Link encap:IPv6-in-IPv4 NOARP MTU:1480 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:0 (0.0 b) TX bytes:0 (0.0 b) tun0 Link encap:UNSPEC HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 inet addr:10.1.1.1 P-t-P:10.1.1.2 Mask:255.255.255.255 UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1500 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:100 RX bytes:0 (0.0 b) TX bytes:0 (0.0 b) 3. View Network Settings of Specific Interface Using interface name (eth0) as an argument with the “ifconfig” command will display details of the specific network interface.\n[root@hauptling ~]# ifconfig eth0 eth0 Link encap:Ethernet HWaddr 00:0B:CD:1C:18:5A inet addr:172.16.25.126 Bcast:172.16.25.63 Mask:255.255.255.224 inet6 addr: fe80::20b:cdff:fe1c:185a/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:2345583 errors:0 dropped:0 overruns:0 frame:0 TX packets:2221421 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:293912265 (280.2 MiB) TX bytes:1044100408 (995.7 MiB) Interrupt:185 Memory:f7fe0000-f7ff0000 The “up” or “ifup” flag with interface name (eth0) activates a network interface if it is not inactive state and allowing to send and receive information. For example, “ifconfig eth0 up” or “ifup eth0” will activate the eth0 interface.\n[root@hauptling ~]# ifconfig eth0 up OR [root@hauptling ~]# ifup eth0 5. How to Disable a Network Interface The “down” or “ifdown” flag with interface name (eth0) deactivates the specified network interface. For example, the “ifconfig eth0 down” or “ifdown eth0” command deactivates the eth0 interface if it is in an inactive state.\n[root@hauptling ~]# ifconfig eth0 down OR [root@hauptling ~]# ifdown eth0 6. How to Assign an IP Address to Network Interface To assign an IP address to a specific interface, use the following command with an interface name (eth0) and ip address that you want to set. For example, “ifconfig eth0 172.16.25.125” will set the IP address to interface eth0.\n[root@hauptling ~]# ifconfig eth0 172.16.25.125 7. How to Assign a Netmask to Network Interface Using the “ifconfig” command with the “netmask” argument and interface name as (eth0) allows you to define a netmask to a given interface. For example, “ifconfig eth0 netmask 255.255.255.224” will set the network mask to a given interface eth0.\n[root@hauptling ~]# ifconfig eth0 netmask 255.255.255.224 8. How to Assign a Broadcast to Network Interface Using the “broadcast” argument with an interface name will set the broadcast address for the given interface. For example, the “ifconfig eth0 broadcast 172.16.25.63” command sets the broadcast address to an interface eth0.\n[root@hauptling ~]# ifconfig eth0 broadcast 172.16.25.63 9. How to Assign an IP, Netmask, and Broadcast to Network Interface To assign an IP address, Netmask address, and Broadcast address all at once using the “ifconfig” command with all arguments as given below.\n[root@hauptling ~]# ifconfig eth0 172.16.25.125 netmask 255.255.255.224 broadcast 172.16.25.63 10. How to Change MTU for a Network Interface The “mtu” argument sets the maximum transmission unit to an interface. The MTU allows you to set the limit size of packets that are transmitted on an interface. The MTU is able to handle a maximum number of octets to an interface in one single transaction.\nFor example, “ifconfig eth0 mtu 1000” will set the maximum transmission unit to a given set (i.e. 1000). Not all network interfaces support MTU settings.\n[root@hauptling ~]# ifconfig eth0 mtu 1000 11. How to Enable Promiscuous Mode What happens in normal mode, when a packet is received by a network card, it verifies that it belongs to itself. If not, it drops the packet normally, but in the promiscuous mode is used to accept all the packets that flow through the network card.\nToday’s network tools use the promiscuous mode to capture and analyze the packets that flow through the network interface. To set the promiscuous mode, use the following command.\n[root@hauptling ~]# ifconfig eth0 promisc 12. How to Disable Promiscuous Mode To disable promiscuous mode, use the “-promisc” switch that drops back the network interface in normal mode.\n[root@hauptling ~]# ifconfig eth0 -promisc 13. How to Add New Alias to Network Interface The ifconfig utility allows you to configure additional network interfaces using the alias feature. To add the alias network interface of eth0, use the following command. Please note that the alias network address is in the same subnet mask. For example, if your eth0 network ip address is 172.16.25.125, then the alias ip address must be 172.16.25.127.\n[root@hauptling ~]# ifconfig eth0:0 172.16.25.127 Next, verify the newly created alias network interface address, by using the “ifconfig eth0:0” command.\n[root@hauptling ~]# ifconfig eth0:0 eth0:0 Link encap:Ethernet HWaddr 00:01:6C:99:14:68 inet addr:172.16.25.123 Bcast:172.16.25.63 Mask:255.255.255.240 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 Interrupt:17 14. How to Remove Alias to Network Interface [root@hauptling ~]# ifconfig eth0:0 down 15. How to Change the MAC address of Network Interface To change the MAC (Media Access Control) address of an eth0 network interface, use the following command with the argument “hw ether“. For example, see below.\n[root@hauptling ~]# ifconfig eth0 hw ether AA:BB:CC:DD:EE:FF ","permalink":"https://hauptling12.github.io/vimmart/posts/ifconfig-command-examples/","tags":["CLI","shell"],"title":"15 Useful “ifconfig” Commands to Configure Network Interface in Linux"},{"categories":["Linux"],"contents":"On the internet, you will find plenty of tools for checking disk space utilization in Linux. However, Linux has a strong built-in utility called ‘df‘.\nThe ‘df‘ command stands for “disk filesystem“, it is used to get a full summary of available and used disk space usage of the file system on the Linux system.\nUsing ‘-h‘ parameter with (df -h) will show the file system disk space statistics in “human-readable” format, means it gives the details in bytes, megabytes, and gigabyte.\nThis article explains a way to get the full information of Linux disk space usage with the help of the ‘df‘ command with their practical examples. So, you could better understand the usage of the df command in Linux.\n1. Check File System Disk Space Usage The “df” command displays the information of device name, total blocks, total disk space, used disk space, available disk space, and mount points on a file system.\n[root@hauptling ~]# df Filesystem 1K-blocks Used Available Use% Mounted on /dev/cciss/c0d0p2 78361192 23185840 51130588 32% / /dev/cciss/c0d0p5 24797380 22273432 1243972 95% /home /dev/cciss/c0d0p3 29753588 25503792 2713984 91% /data /dev/cciss/c0d0p1 295561 21531 258770 8% /boot tmpfs 257476 0 257476 0% /dev/shm 2. Display Information of all File System Disk Space Usage The same as above, but it also displays information of dummy file systems along with all the file system disk usage and their memory utilization.\n[root@hauptling ~]# df -a Filesystem 1K-blocks Used Available Use% Mounted on /dev/cciss/c0d0p2 78361192 23186116 51130312 32% / proc 0 0 0 - /proc sysfs 0 0 0 - /sys devpts 0 0 0 - /dev/pts /dev/cciss/c0d0p5 24797380 22273432 1243972 95% /home /dev/cciss/c0d0p3 29753588 25503792 2713984 91% /data /dev/cciss/c0d0p1 295561 21531 258770 8% /boot tmpfs 257476 0 257476 0% /dev/shm none 0 0 0 - /proc/sys/fs/binfmt_misc sunrpc 0 0 0 - /var/lib/nfs/rpc_pipefs 3. Show Disk Space Usage in Human Readable Format Have you noticed that the above commands display information in bytes, which is not readable at all because we are in a habit of reading the sizes in megabytes, gigabytes, etc. as it makes it very easy to understand and remember.\nThe df command provides an option to display sizes in Human Readable formats by using \u0026lsquo;-h\u0026rsquo; (prints the results in human-readable format (e.g., 1K 2M 3G)).\n[root@hauptling ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/cciss/c0d0p2 75G 23G 49G 32% / /dev/cciss/c0d0p5 24G 22G 1.2G 95% /home /dev/cciss/c0d0p3 29G 25G 2.6G 91% /data /dev/cciss/c0d0p1 289M 22M 253M 8% /boot tmpfs 252M 0 252M 0% /dev/shm 4. Display Information of /home File System To see the information of only device /home file systems in human-readable format use the following command.\n[root@hauptling ~]# df -hT /home Filesystem\tType Size Used Avail Use% Mounted on /dev/cciss/c0d0p5\text3 24G 22G 1.2G 95% /home 5. Display Information of File System in Bytes To display all file system information and usage in 1024-byte blocks, use the option ‘-k‘ (e.g. --block-size=1K) as follows.\n[root@hauptling ~]# df -k Filesystem 1K-blocks Used Available Use% Mounted on /dev/cciss/c0d0p2 78361192 23187212 51129216 32% / /dev/cciss/c0d0p5 24797380 22273432 1243972 95% /home /dev/cciss/c0d0p3 29753588 25503792 2713984 91% /data /dev/cciss/c0d0p1 295561 21531 258770 8% /boot tmpfs 257476 0 257476 0% /dev/shm 6. Display Information of File System in MB To display information of all file system usage in MB (MegaByte) use the option ‘-m‘.\n[root@hauptling ~]# df -m Filesystem 1M-blocks Used Available Use% Mounted on /dev/cciss/c0d0p2 76525 22644 49931 32% / /dev/cciss/c0d0p5 24217 21752 1215 95% /home /dev/cciss/c0d0p3 29057 24907 2651 91% /data /dev/cciss/c0d0p1 289 22 253 8% /boot tmpfs 252 0 252 0% /dev/shm 7. Display Information of File System in GB To display information of all file system statistics in GB (Gigabyte) use the option as ‘df -h‘.\n[root@hauptling ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/cciss/c0d0p2 75G 23G 49G 32% / /dev/cciss/c0d0p5 24G 22G 1.2G 95% /home /dev/cciss/c0d0p3 29G 25G 2.6G 91% /data /dev/cciss/c0d0p1 289M 22M 253M 8% /boot tmpfs 252M 0 252M 0% /dev/shm 8. Display File System Inodes Using ‘-i‘ switch will display the information of a number of used inodes and their percentage for the file system.\n[root@hauptling ~]# df -i Filesystem Inodes IUsed IFree IUse% Mounted on /dev/cciss/c0d0p2 20230848 133143 20097705 1% / /dev/cciss/c0d0p5 6403712 798613 5605099 13% /home /dev/cciss/c0d0p3 7685440 1388241 6297199 19% /data /dev/cciss/c0d0p1 76304 40 76264 1% /boot tmpfs 64369 1 64368 1% /dev/shm 9. Display File System Type If you notice all the above commands output, you will see there is no Linux file system type mentioned in the results. To check the file system type of your system use the option ‘T‘. It will display file system type along with other information.\n[root@hauptling ~]# df -T Filesystem\tType 1K-blocks Used Available Use% Mounted on /dev/cciss/c0d0p2\text3 78361192 23188812 51127616 32% / /dev/cciss/c0d0p5\text3 24797380 22273432 1243972 95% /home /dev/cciss/c0d0p3\text3 29753588 25503792 2713984 91% /data /dev/cciss/c0d0p1\text3 295561 21531 258770 8% /boot tmpfs\ttmpfs 257476 0 257476 0% /dev/shm 10. Include Certain File System Type If you want to display a certain file system type use the ‘-t‘ option. For example, the following command will only display the ext3 file system.\n[root@hauptling ~]# df -t ext3 Filesystem 1K-blocks Used Available Use% Mounted on /dev/cciss/c0d0p2 78361192 23190072 51126356 32% / /dev/cciss/c0d0p5 24797380 22273432 1243972 95% /home /dev/cciss/c0d0p3 29753588 25503792 2713984 91% /data /dev/cciss/c0d0p1 295561 21531 258770 8% /boot 11. Exclude Certain File System Type If you want to display a file system type that doesn’t belongs to the ext3 type use the option ‘-x‘. For example, the following command will only display other file systems types other than ext3.\n[root@hauptling ~]# df -x ext3 Filesystem 1K-blocks Used Available Use% Mounted on tmpfs 257476 0 257476 0% /dev/shm Display Information of df Command. Using \u0026lsquo;--help‘ switch will display a list of available option that is used with df command. [root@hauptling ~]# df --help Usage: df [OPTION]... [FILE]... Show information about the file system on which each FILE resides, or all file systems by default. Mandatory arguments to long options are mandatory for short options too. -a, --all include dummy file systems -B, --block-size=SIZE use SIZE-byte blocks -h, --human-readable print sizes in human readable format (e.g., 1K 234M 2G) -H, --si likewise, but use powers of 1000 not 1024 -i, --inodes list inode information instead of block usage -k like --block-size=1K -l, --local limit listing to local file systems --no-sync do not invoke sync before getting usage info (default) -P, --portability use the POSIX output format --sync invoke sync before getting usage info -t, --type=TYPE limit listing to file systems of type TYPE -T, --print-type print file system type -x, --exclude-type=TYPE limit listing to file systems, not of type TYPE -v (ignored) --help display this help and exit --version output version information and exit SIZE may be (or maybe an integer optionally followed by) one of the following: kB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y. Report bugs to \u0026lt;bug-coreutils@gnu.org\u0026gt;. ","permalink":"https://hauptling12.github.io/vimmart/posts/how-to-check-disk-space-in-linux/","tags":["CLI","shell"],"title":"How to Check Disk Space in Linux"},{"categories":["Linux"],"contents":"In Linux ‘cd‘ (Change Directory) command is one of the most important and most widely used command for newbies as well as system administrators. For admins on a headless server, ‘cd‘ is the only way to navigate to a directory to check log, execute a program/application/script and for every other task. For newbie it is among those initial commands they make their hands dirty with.\nThus, keeping in mind, we here bringing you 15 basic commands of ‘cd‘ using tricks and shortcuts to reduce your efforts on the terminal and save time by using these known tricks.\nChange from current directory to /usr/local. avi@hauptling:~$ cd /usr/local avi@hauptling:/usr/local$ Change from current directory to /usr/local/lib using absolute path. avi@hauptling:/usr/local$ cd /usr/local/lib avi@hauptling:/usr/local/lib$ Change from current working directory to /usr/local/lib using relative path. avi@hauptling:/usr/local$ cd lib avi@hauptling:/usr/local/lib$ (a) Switch back to previous directory where you working earlier. avi@hauptling:/usr/local/lib$ cd - /usr/local avi@hauptling:/usr/local$ (b) Change Current directory to parent directory. avi@hauptling:/usr/local/lib$ cd .. avi@hauptling:/usr/local$ Show last working directory from where we moved (use ‘–‘ switch) as shown. avi@hauptling:/usr/local$ cd -- /home/avi Move two directory up from where you are now. avi@hauptling:/usr/local$ cd ../ ../ avi@hauptling:/usr$ Move to users home directory from anywhere. avi@hauptling:/usr/local$ cd ~ avi@hauptling:~$ or avi@hauptling:/usr/local$ cd avi@hauptling:~$ Change working directory to current working directory (seems no use of in General). avi@hauptling:~/Downloads$ cd . avi@hauptling:~/Downloads$ or avi@hauptling:~/Downloads$ cd ./ avi@hauptling:~/Downloads$ Your present working Directory is “/usr/local/lib/python3.4/dist-packages/ ”, change it to “/home/avi/Desktop/ ”, in one line command, by moving up in the directory till ‘/’ then using absolute path. avi@hauptling:/usr/local/lib/python3.4/dist-packages$ cd ../../../../../home/avi/Desktop/ avi@hauptling:~/Desktop$ Change from current working directory to /var/www/html without typing in full using TAB. avi@hauptling:/var/www$ cd /v\u0026lt;TAB\u0026gt;/w\u0026lt;TAB\u0026gt;/h\u0026lt;TAB\u0026gt; avi@hauptling:/var/www/html$ Navigate from your current working directory to /etc/v__ _, Oops! You forgot the name of directory and not supposed to use TAB. avi@hauptling:~$ cd /etc/v* avi@hauptling:/etc/vbox$ Note: This will move to ‘vbox‘ only if there is only one directory starting with ‘v‘. If more than one directory starting with ‘v‘ exist, and no more criteria is provided in command line, it will move to the first directory starting with ‘v‘, alphabetically as their presence in standard dictionary.\nYou need to navigate to user ‘av‘ (not sure if it is avi or avt) home directory, without using TAB. avi@hauptling:/etc$ cd /home/av? avi@hauptling:~$ What are pushd and popd in Linux? Pushd and popd are Linux commands in bash and certain other shell which saves current working directory location to memory and bring to the directory from memory as current working directory, respectively as well as changes directory. avi@hauptling:~$ pushd /var/www/html /var/www/html ~ avi@hauptling:/var/www/html$ The above command saves the current location to memory and changes to the requested directory. As soon as popd is fired, it fetch the saved directory location from memory and makes it current working directory.\navi@hauptling:/var/www/html$ popd ~ avi@hauptling:~$ Change to a directory containing white spaces. avi@hauptling:~$ cd test\\ hauptling/ avi@hauptling:~/test hauptling$ or avi@hauptling:~$ cd \u0026#39;test hauptling\u0026#39; avi@hauptling:~/test hauptling$ or avi@hauptling:~$ cd \u0026#34;test hauptling\u0026#34;/ avi@hauptling:~/test hauptling$ Change from current working directory to Downloads and list all its settings in one go. avi@hauptling:/usr$ cd ~/Downloads \u0026amp;\u0026amp; ls … . service_locator_in.xls sources.list teamviewer_linux_x64.deb tor-browser-linux64-3.6.3_en-US.tar.xz . ... ","permalink":"https://hauptling12.github.io/vimmart/posts/cd-command-in-linux/","tags":["CLI","shell"],"title":"15 Practical Examples of ‘cd’ Command in Linux"},{"categories":["Linux"],"contents":"For those working with Linux command Line, command ‘pwd‘ is very helpful, which tells where you are – in which directory, starting from the root (/). Specially for Linux newbies, who may get lost amidst of directories in command Line Interface while navigation, command ‘pwd‘ comes to rescue.\nWhat is pwd? ‘pwd‘ stands for ‘Print Working Directory‘. As the name states, command ‘pwd‘ prints the current working directory or simply the directory user is, at present. It prints the current directory name with the complete path starting from root (/). This command is built in shell command and is available on most of the shell – bash, Bourne shell, ksh,zsh, etc.\nBasic syntax of pwd: # pwd [OPTION] Options used with pwd \u0026nbsp;Options \u0026nbsp;Description \u0026nbsp;-L (logical) \u0026nbsp;Use PWD from environment, even if it contains symbolic links \u0026nbsp;-P (physical) \u0026nbsp;Avoid all symbolic links \u0026nbsp;–help \u0026nbsp;Display this help and exit \u0026nbsp;–version \u0026nbsp;Output version information and exit If both ‘-L‘ and ‘-P‘ options are used, option ‘L‘ is taken into priority. If no option is specified at the prompt, pwd will avoid all symlinks, i.e., take option ‘-P‘ into account.\nExit status of command pwd:\n0 Success Non-zero Failure This article aims at providing you a deep insight of Linux command ‘pwd‘ with practical examples.\n1. Print your current working directory. avihauptling:~$ /bin/pwd /home/avi 2. Create a symbolic link of a folder (say /var/www/html into your home directory as htm). Move to the newly created directory and print working directory with symbolic links and without symbolic links.\nCreate a symbolic link of folder /var/www/html as htm in your home directory and move to it.\navi@hauptling:~$ ln -s /var/www/html/ htm avi@hauptling:~$ cd htm Print working directory from environment even if it contains symlinks. avi@hauptling:~$ /bin/pwd -L /home/avi/htm Print actual physical current working directory by resolving all symbolic links. avi@hauptling:~$ /bin/pwd -P /var/www/html 5. Check if the output of command “pwd” and “pwd -P” are same or not i.e., if no options are given at run-time does “pwd” takes option -P into account or not, automatically.\navi@hauptling:~$ /bin/pwd /var/www/html Result: It’s clear from the above output of example 4 and 5 (both result are same) thus, when no options are specified with command “pwd”, it automatically takes option “-P” into account.\nPrint version of your ‘pwd’ command. avi@hauptling:~$ /bin/pwd --version pwd (GNU coreutils) 8.23 Copyright (C) 2014 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt;. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Written by Jim Meyering. Note: A ‘pwd’ command is often used without options and never used with arguments.\nImportant: You might have noticed that we are executing the above command as “/bin/pwd” and not “pwd”.\nSo what’s the difference? Well “pwd” alone means shell built-in pwd. Your shell may have different version of pwd. Please refer manual. When we are using /bin/pwd, we are calling the binary version of that command. Both the shell and the binary version of command Prints Current Working Directory, though the binary version have more options.\nPrint all the locations containing executable named pwd. avi@hauptling:~$ type -a pwd pwd is a shell builtin pwd is /bin/pwd Store the value of “pwd” command in variable (say a), and print its value from the variable (important for shell scripting perspective). avi@hauptling:~$ a=$(pwd) avi@hauptling:~$ echo \u0026#34;Current working directory is : $a\u0026#34; Current working directory is : /home/avi Alternatively, we can use printf, in the above example.\nChange current working directory to anything (say /home) and display it in command line prompt. Execute a command (say ‘ls‘) to verify is everything is OK. avi@hauptling:~$ cd /home avi@hauptling:~$ PS1=\u0026#39;$pwd\u0026gt; \u0026#39;\t[Notice single quotes in the example] \u0026gt; ls Set multi-line command line prompt (say something like below). /home 123#Hello#! And then execute a command (say ls) to check is everything is OK.\navi@hauptling:~$ PS1=\u0026#39; \u0026gt; $PWD $ 123#Hello#! $ \u0026#39; /home 123#Hello#! Check the current working directory and previous working directory in one GO! avi@hauptling:~$ echo “$PWD $OLDPWD” /home /home/avi What is the absolute path (starting from /) of the pwd binary file. /bin/pwd What is the absolute path (starting from /) of the pwd source file. /usr/include/pwd.h Print the absolute path (starting from /) of the pwd manual pages file. /usr/share/man/man1/pwd.1.gz 15. Write a shell script analyses current directory (say hauptling) in your home directory. If you are under directory hauptling it output “Well! You are in hauptling directory” and then print “Good Bye” else create a directory hauptling under your home directory and ask you to cd to it.\nLet’s first create a ‘hauptling’ directory, under it create a following shell script file with name ‘pwd.sh’.\navi@hauptling:~$ mkdir hauptling avi@hauptling:~$ cd hauptling avi@hauptling:~$ nano pwd.sh Next, add the following script to the pwd.sh file.\n#!/bin/bash x=\u0026#34;$(pwd)\u0026#34; if [ \u0026#34;$x\u0026#34; == \u0026#34;/home/$USER/hauptling\u0026#34; ] then { echo \u0026#34;Well you are in hauptling directory\u0026#34; echo \u0026#34;Good Bye\u0026#34; } else { mkdir /home/$USER/hauptling echo \u0026#34;Created Directory hauptling you may now cd to it\u0026#34; } fi Give execute permission and run it.\navi@hauptling:~$ chmod 755 pwd.sh avi@hauptling:~$ ./pwd.sh Well you are in hauptling directory Good Bye ","permalink":"https://hauptling12.github.io/vimmart/posts/pwd-command-examples/","tags":["CLI","shell"],"title":"Pwd Command Examples"},{"categories":["Linux"],"contents":"ls command is one of the most frequently used commands in Linux. I believe the ls command is the first command you may use when you get into the command prompt of Linux Box.\nWe use the ls command daily basis and frequently even though we may not aware and never use all the available ls command tricks.\nIn this article, we’ll be discussing the basics of ls command examples with all the available parameters in Linux.\n1. List Files and Directories in Linux Running ls command with no option list files and directories in a bare format where we won’t be able to view details like file types, size, modified date and time, permission and links, etc.\n# ls 0001.pcap Desktop Downloads index.html install.log.syslog Pictures Templates anaconda-ks.cfg Documents fbcmd_update.php install.log Music Public Videos 2. Long Listing of Files in Linux Here, ls -l (-l is a character, not one) shows file or directory, size, modified date and time, file or folder name and owner of the file, and its permission.\n# ls -l total 176 -rw-r--r--. 1 root root 683 Aug 19 09:59 0001.pcap -rw-------. 1 root root 1586 Jul 31 02:17 anaconda-ks.cfg drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Desktop drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Documents drwxr-xr-x. 4 root root 4096 Aug 16 02:55 Downloads -rw-r--r--. 1 root root 21262 Aug 12 12:42 fbcmd_update.php -rw-r--r--. 1 root root 46701 Jul 31 09:58 index.html -rw-r--r--. 1 root root 48867 Jul 31 02:17 install.log -rw-r--r--. 1 root root 11439 Jul 31 02:13 install.log.syslog drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Music drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Pictures drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Public drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Templates drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Videos 3. View Hidden Files in Linux List all files including hidden files starting with ..\n# ls -a . .bashrc Documents .gconfd install.log .nautilus .pulse-cookie .. .cache Downloads .gnome2 install.log .netstat.swp .recently-used.xbel 0001.pcap .config .elinks .gnome2_private .kde .opera .spice-vdagent anaconda-ks.cfg .cshrc .esd_auth .gtk-bookmarks .libreoffice Pictures .tcshrc .bash_history .dbus .fbcmd .gvfs .local .pki Templates .bash_logout Desktop fbcmd_update.php .ICEauthority .mozilla Public Videos .bash_profile .digrc .gconf index.html Music .pulse .wireshark 4. List Files with Human Readable Format With a combination of -lh option, shows sizes in a human-readable format.\n# ls -lh total 176K -rw-r--r--. 1 root root 683 Aug 19 09:59 0001.pcap -rw-------. 1 root root 1.6K Jul 31 02:17 anaconda-ks.cfg drwxr-xr-x. 2 root root 4.0K Jul 31 02:48 Desktop drwxr-xr-x. 2 root root 4.0K Jul 31 02:48 Documents drwxr-xr-x. 4 root root 4.0K Aug 16 02:55 Downloads -rw-r--r--. 1 root root 21K Aug 12 12:42 fbcmd_update.php -rw-r--r--. 1 root root 46K Jul 31 09:58 index.html -rw-r--r--. 1 root root 48K Jul 31 02:17 install.log -rw-r--r--. 1 root root 12K Jul 31 02:13 install.log.syslog drwxr-xr-x. 2 root root 4.0K Jul 31 02:48 Music drwxr-xr-x. 2 root root 4.0K Jul 31 02:48 Pictures drwxr-xr-x. 2 root root 4.0K Jul 31 02:48 Public drwxr-xr-x. 2 root root 4.0K Jul 31 02:48 Templates drwxr-xr-x. 2 root root 4.0K Jul 31 02:48 Videos 5. List Files and Directories with ‘/’ Character at the End Using the -F option with the ls command will add the \u0026lsquo;/\u0026rsquo; character at the end of each directory.\n# ls -F 0001.pcap Desktop/ Downloads/ index.html install.log.syslog Pictures/ Templates/ anaconda-ks.cfg Documents/ fbcmd_update.php install.log Music/ Public/ Videos/ 6. List Files in Reverse Order in Linux The following command with the ls -r option display files and directories in reverse order.\n# ls -r Videos Public Music install.log fbcmd_update.php Documents anaconda-ks.cfg Templates Pictures install.log.syslog index.html Downloads Desktop 0001.pcap 7. Recursively list Sub-Directories in Linux ls -R option will list very long listing directory trees. See an example of the output of the command.\n# ls -R total 1384 -rw-------. 1 root root 33408 Aug 8 17:25 anaconda.log -rw-------. 1 root root 30508 Aug 8 17:25 anaconda.program.log ./httpd: total 132 -rw-r--r-- 1 root root 0 Aug 19 03:14 access_log -rw-r--r--. 1 root root 61916 Aug 10 17:55 access_log-20120812 ./lighttpd: total 68 -rw-r--r-- 1 lighttpd lighttpd 7858 Aug 21 15:26 access.log -rw-r--r--. 1 lighttpd lighttpd 37531 Aug 17 18:21 access.log-20120819 ./nginx: total 12 -rw-r--r--. 1 root root 0 Aug 12 03:17 access.log -rw-r--r--. 1 root root 390 Aug 12 03:17 access.log-20120812.gz 8. List Files and Directories in Reverse Order in Linux A combination of -ltr will show the latest modification file or directory date as last.\n# ls -ltr total 176 -rw-r--r--. 1 root root 11439 Jul 31 02:13 install.log.syslog -rw-r--r--. 1 root root 48867 Jul 31 02:17 install.log -rw-------. 1 root root 1586 Jul 31 02:17 anaconda-ks.cfg drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Desktop drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Videos drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Templates drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Public drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Pictures drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Music drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Documents -rw-r--r--. 1 root root 46701 Jul 31 09:58 index.html -rw-r--r--. 1 root root 21262 Aug 12 12:42 fbcmd_update.php drwxr-xr-x. 4 root root 4096 Aug 16 02:55 Downloads -rw-r--r--. 1 root root 683 Aug 19 09:59 0001.pcap 9. Sort Files by File Size in Linux With a combination of -lS displays file size in order, will display big in size first.\n# ls -lS total 176 -rw-r--r--. 1 root root 48867 Jul 31 02:17 install.log -rw-r--r--. 1 root root 46701 Jul 31 09:58 index.html -rw-r--r--. 1 root root 21262 Aug 12 12:42 fbcmd_update.php -rw-r--r--. 1 root root 11439 Jul 31 02:13 install.log.syslog drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Desktop drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Documents drwxr-xr-x. 4 root root 4096 Aug 16 02:55 Downloads drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Music drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Pictures drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Public drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Templates drwxr-xr-x. 2 root root 4096 Jul 31 02:48 Videos -rw-------. 1 root root 1586 Jul 31 02:17 anaconda-ks.cfg -rw-r--r--. 1 root root 683 Aug 19 09:59 0001.pcap 10. Display Inode number of File or Directory We can see some numbers printed before the file/directory name. With -i options list file/directory with an inode number.\n# ls -i 20112 0001.pcap 23610 Documents 23793 index.html 23611 Music 23597 Templates 23564 anaconda-ks.cfg 23595 Downloads 22 install.log 23612 Pictures 23613 Videos 23594 Desktop 23585 fbcmd_update.php 35 install.log.syslog 23601 Public 11. Shows Version of ls Command Check the version of the ls command.\n# ls --version ls (GNU coreutils) 8.4 Copyright (C) 2010 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt;. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Written by Richard M. Stallman and David MacKenzie. 12. Show ls Command Help Page The help page of ls command with their option.\n# ls --help Usage: ls [OPTION]... [FILE]... 13. List Directory Information in Linux With ls -l command list files under directory /tmp. Wherein with -ld parameters displays information of /tmp directory.\n# ls -l /tmp total 408 drwx------. 2 narad narad 4096 Aug 2 02:00 CRX_75DAF8CB7768 -r--------. 1 root root 384683 Aug 4 12:28 htop-1.0.1.tar.gz drwx------. 2 root root 4096 Aug 4 11:20 keyring-6Mfjnk drwx------. 2 root root 4096 Aug 16 01:33 keyring-pioZJr drwx------. 2 gdm gdm 4096 Aug 21 11:26 orbit-gdm drwx------. 2 root root 4096 Aug 19 08:41 pulse-gl6o4ZdxQVrX drwx------. 2 narad narad 4096 Aug 4 08:16 pulse-UDH76ExwUVoU drwx------. 2 gdm gdm 4096 Aug 21 11:26 pulse-wJtcweUCtvhn -rw-------. 1 root root 300 Aug 16 03:34 yum_save_tx-2012-08- 16-03-34LJTAa1.yumtx # ls -ld /tmp/ drwxrwxrwt. 13 root root 4096 Aug 21 12:48 /tmp/ 14. Display UID and GID of Files To display UID and GID of files and directories. use option -n with ls command.\n# ls -n total 36 drwxr-xr-x. 2 500 500 4096 Aug 2 01:52 Downloads drwxr-xr-x. 2 500 500 4096 Aug 2 01:52 Music drwxr-xr-x. 2 500 500 4096 Aug 2 01:52 Pictures -rw-rw-r--. 1 500 500 12 Aug 21 13:06 tmp.txt drwxr-xr-x. 2 500 500 4096 Aug 2 01:52 Videos 15. ls command and its Aliases We have made an alias for ls command, when we execute ls command it’ll take the -l option by default and display a long listing as mentioned earlier.\n# alias ls=\u0026#34;ls -l\u0026#34; Note: We can see a number of aliases available in your system with the below alias command and the same can be unalias as shown below example.\n# alias alias cp=\u0026#39;cp -i\u0026#39; alias l.=\u0026#39;ls -d .* --color=auto\u0026#39; alias ll=\u0026#39;ls -l --color=auto\u0026#39; alias ls=\u0026#39;ls --color=auto\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; alias rm=\u0026#39;rm -i\u0026#39; alias which=\u0026#39;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde\u0026#39; To remove an alias previously defined, just use the unalias command.\n# unalias ls ","permalink":"https://hauptling12.github.io/vimmart/posts/15-basic-ls-command-examples-in-linux/","tags":["shell","CLI"],"title":"15 Basic Ls Command Examples in Linux"},{"categories":["Linux"],"contents":"An ISO image or .iso (International Organization for Standardization) file is an archive file that contains a disk image called ISO 9660 file system format.\nEvery ISO file has .iso an extension has a defined format name taken from the ISO 9660 file system and is specially used with CD/DVD ROMs. In simple words, an iso file is a disk image.\nI have seen most of the Linux operating system images that we download from the internet are .ISO format. Typically an ISO image contains the installation of software such as operating system installation files, games installation files, or any other applications.\nSometimes it happens that we need to access files and view content from these ISO images, but without wasting disk space and time by burning them onto CD/DVD or USB drives.\nThis article describes how to mount and unmount an ISO image on a Linux Operating system to access and list the content of files.\nHow to Mount an ISO Image in Linux To mount an ISO image on RedHat-based or Debian-based Linux distributions, you must be logged in as a “root” user or switch to “sudo” and run the following commands from a terminal to create a mount point.\n# mkdir /mnt/iso OR $ sudo mkdir /mnt/iso Once you created a mount point, use the “mount” command to mount an iso file called “Fedora-Server-dvd-x86_64-36-1.5.iso“.\n# mount -t iso9660 -o loop /home/hauptling/Fedora-Server-dvd-x86_64-36-1.5.iso /mnt/iso/ OR $ sudo mount -t iso9660 -o loop /home/hauptling/Fedora-Server-dvd-x86_64-36-1.5.iso /mnt/iso/ Where Options -t – This argument is used to indicate the given filesystem type. ISO 9660 – It describes the standard and default filesystem structure to be used on CD/DVD ROMs. -o – Options are necessary with a -o argument followed by a separated comma string of options. loop -The loop device is a pseudo-device that is often used for mounting CD/DVD ISO images and makes those files accessible as a block device. After the ISO image is mounted successfully, go to the mounted directory at /mnt/iso and list the content of an ISO image. It will only mount in read-only mode, so none of the files can be modified.\n# cd /mnt/iso # ls -l You will see the list of files of an ISO image, that we have mounted in the above command. For example, the directory listing of a Fedora-Server-dvd-x86_64-36-1.5.iso image would look like this.\ntotal 21 dr-xr-xr-x 3 root root 2048 May 5 02:49 EFI -r--r--r-- 1 root root 2574 Apr 12 00:34 Fedora-Legal-README.txt dr-xr-xr-x 3 root root 2048 May 5 02:49 images dr-xr-xr-x 2 root root 2048 May 5 02:49 isolinux -r--r--r-- 1 root root 1063 Apr 12 00:32 LICENSE -r--r--r-- 1 root root 95 May 5 02:47 media.repo dr-xr-xr-x 28 root root 4096 May 5 02:49 Packages dr-xr-xr-x 2 root root 4096 May 5 02:49 repodata -r--r--r-- 1 root root 1118 May 5 02:49 TRANS.TBL How to Unmount an ISO Image in Linux Simply run the following command from the terminal either “root” or “sudo” to unmount a mounted ISO image.\n# umount /mnt/iso OR $ sudo umount /mnt/iso ","permalink":"https://hauptling12.github.io/vimmart/posts/how-to-mount-and-unmount-an-iso-image-in-linux/","tags":null,"title":"How to Mount and Unmount an Iso Image in Linux"},{"categories":["Linux"],"contents":"The cat (short for “concatenate“) command is one of the most frequently used commands in Linux/Unix-like operating systems. cat command allows us to create single or multiple files, view content of a file, concatenate files and redirect output in terminal or files.\nIn this article, we are going to find out the handy use of cat commands with their examples in Linux.\nGeneral Syntax of Cat Command $ cat [OPTION] [FILE]... 1. Display Contents of File The below example will show the contents of /etc/passwd file.\n# cat /etc/passwd root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin narad:x:500:500::/home/narad:/bin/bash 2. View Contents of Multiple Files in terminal In below example, it will display the contents of the test and test1 file in the terminal.\n# cat test test1 Hello everybody Hi world, 3. Create a File with Cat Command We will create a file called test2 file with the below command.\n# cat \u0026gt;test2 Awaits input from the user, type desired text, and press CTRL+D (hold down Ctrl key and type ‘d‘) to exit. The text will be written in the test2 file. You can see the content of the file with the following cat command.\n# cat test2 hello everyone, how do you do? 4. Use Cat Command with More \u0026amp; Less Options If a file having a large number of content that won’t fit in the output terminal and the screen scrolls up very fast, we can use parameters more and less with the cat command as shown below.\n# cat song.txt | more # cat song.txt | less 5. Display Line Numbers in File With the -n option you could see the line numbers of a file song.txt in the output terminal.\n# cat -n song.txt 1 \u0026#34;Heal The World\u0026#34; 2 There\u0026#39;s A Place In 3 Your Heart 4 And I Know That It Is Love 5 And This Place Could 6 Be Much 7 Brighter Than Tomorrow 8 And If You Really Try 9 You\u0026#39;ll Find There\u0026#39;s No Need 10 To Cry 11 In This Place You\u0026#39;ll Feel 12 There\u0026#39;s No Hurt Or Sorrow 6. Display $ at the End of File In the below, you can see with the -e option that ‘$‘ is shows at the end of the line and also in space showing ‘$‘ if there is any gap between paragraphs. This option is useful to squeeze multiple lines into a single line.\n# cat -e test hello everyone, how do you do?$ $ Hey, am fine.$ How\u0026#39;s your training going on?$ $ 7. Display Tab Separated Lines in File In the below output, we could see TAB space is filled up with the ‘^I‘ characters.\n# cat -T test hello ^Ieveryone, how do you do? Hey, ^Iam fine. ^I^IHow\u0026#39;s your training ^Igoing on? Let\u0026#39;s do ^Isome practice in Linux. 8. Display Multiple Files at Once In the below example we have three files test, test1, and test2, and able to view the contents of those files as shown above. We need to separate each file with ; (semicolon).\n# cat test; cat test1; cat test2 This is a test file This is the test1 file. This is test2 file. 9. Use Standard Output with Redirection Operator We can redirect the standard output of a file into a new file else existing file with a ‘\u0026gt;‘ (greater than) symbol. Careful, existing contents of the test1 will be overwritten by the contents of the test file.\n# cat test \u0026gt; test1 10. Appending Standard Output with Redirection Operator Appends in existing file with ‘\u0026gt;\u0026gt;‘ (double greater than) symbol. Here, the contents of the test file will be appended at the end of the test1 file.\n# cat test \u0026gt;\u0026gt; test1 11. Redirecting Standard Input with Redirection Operator When you use the redirect with standard input ‘\u0026lt;‘ (less than symbol), it uses file name test2 as input for command and output will be shown in a terminal.\n# cat \u0026lt; test2 This is test2 file. 12. Redirecting Multiple Files Contain in a Single File This will create a file called test3 and all output will be redirected in a newly created file.\n# cat test test1 test2 \u0026gt; test3 13. Sorting Contents of Multiple Files in a Single File This will create a file test4 and the output of the cat command is piped to sort and the result will be redirected to a newly created file.\n# cat test test1 test2 test3 | sort \u0026gt; test4 This article shows the basic commands that may help you to explore the cat commands. You may refer man page of the cat command if you want to know more options.\n","permalink":"https://hauptling12.github.io/vimmart/posts/13-basic-cat-command-examples-in-linux/","tags":["CLI"],"title":"13 Basic Cat Command Examples in Linux"},{"categories":["Linux"],"contents":"Do you dual boot often? Well make the Bootloader Selection Screen Awesome! Here are my top 5 GRUB Bootloader themes.\nAll-In-One Pack This Pack is everything below so you can swap between them\nInstallation git clone https://github.com/ChrisTitusTech/Top-5-Bootloader-Themes cd Top-5-Bootloader-Themes sudo ./install.sh CyberRE Source: https://www.gnome-look.org/p/1420727/\nCyberPunk Source: https://www.gnome-look.org/p/1429443/\nFallout Source: https://www.gnome-look.org/p/1230882/\nVimix Source: https://www.gnome-look.org/p/1009236/\nShodan Source: https://www.gnome-look.org/p/1251112/\n","permalink":"https://hauptling12.github.io/vimmart/posts/grub-bootloader-themes/","tags":["grub","theme"],"title":"Grub Bootloader Themes"},{"categories":["Linux","Programming"],"contents":" 1. Basic Operations a. export Displays all environment variables. If you want to get details of a specific variable, use echo $VARIABLE_NAME.\nexport Example:\n$ export AWS_HOME=/Users/adnanadnan/.aws LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 LESS=-R $ echo $AWS_HOME /Users/adnanadnan/.aws b. whatis whatis shows description for user commands, system calls, library functions, and others in manual pages\nwhatis something Example:\n$ whatis bash bash (1) - GNU Bourne-Again SHell c. whereis whereis searches for executables, source files, and manual pages using a database built by system automatically.\nwhereis name Example:\n$ whereis php /usr/bin/php d. which which searches for executables in the directories specified by the environment variable PATH. This command will print the full path of the executable(s).\nwhich program_name Example:\n$ which php /c/xampp/php/php e. clear Clears content on window.\n1.1. File Operations cat chmod chown cp diff file find gunzip gzcat gzip head lpq lpr lprm ls more mv rm tail touch a. cat It can be used for the following purposes under UNIX or Linux.\nDisplay text files on screen Copy text files Combine text files Create new text files cat filename cat file1 file2 cat file1 file2 \u0026gt; newcombinedfile cat \u0026lt; file1 \u0026gt; file2 #copy file1 to file2 b. chmod The chmod command stands for \u0026ldquo;change mode\u0026rdquo; and allows you to change the read, write, and execute permissions on your files and folders. For more information on this command check this link.\nchmod -options filename c. chown The chown command stands for \u0026ldquo;change owner\u0026rdquo;, and allows you to change the owner of a given file or folder, which can be a user and a group. Basic usage is simple forward first comes the user (owner), and then the group, delimited by a colon.\nchown -options user:group filename d. cp Copies a file from one location to other.\ncp filename1 filename2 Where filename1 is the source path to the file and filename2 is the destination path to the file.\ne. diff Compares files, and lists their differences.\ndiff filename1 filename2 f. file Determine file type.\nfile filename Example:\n$ file index.html index.html: HTML document, ASCII text g. find Find files in directory\nfind directory options pattern Example:\n$ find . -name README.md $ find /home/user1 -name \u0026#39;*.png\u0026#39; h. gunzip Un-compresses files compressed by gzip.\ngunzip filename i. gzcat Lets you look at gzipped file without actually having to gunzip it.\ngzcat filename j. gzip Compresses files.\ngzip filename k. head Outputs the first 10 lines of file\nhead filename l. lpq Check out the printer queue.\nlpq Example:\n$ lpq Rank Owner Job File(s) Total Size active adnanad 59 demo 399360 bytes 1st adnanad 60 (stdin) 0 bytes m. lpr Print the file.\nlpr filename n. lprm Remove something from the printer queue.\nlprm jobnumber o. ls Lists your files. ls has many options: -l lists files in \u0026rsquo;long format\u0026rsquo;, which contains the exact size of the file, who owns the file, who has the right to look at it, and when it was last modified. -a lists all files, including hidden files. For more information on this command check this link.\nls option Example:\n$ ls -la rwxr-xr-x 33 adnan staff 1122 Mar 27 18:44 . drwxrwxrwx 60 adnan staff 2040 Mar 21 15:06 .. -rw-r--r--@ 1 adnan staff 14340 Mar 23 15:05 .DS_Store -rw-r--r-- 1 adnan staff 157 Mar 25 18:08 .bumpversion.cfg -rw-r--r-- 1 adnan staff 6515 Mar 25 18:08 .config.ini -rw-r--r-- 1 adnan staff 5805 Mar 27 18:44 .config.override.ini drwxr-xr-x 17 adnan staff 578 Mar 27 23:36 .git -rwxr-xr-x 1 adnan staff 2702 Mar 25 18:08 .gitignore p. more Shows the first part of a file (move with space and type q to quit).\nmore filename q. mv Moves a file from one location to other.\nmv filename1 filename2 Where filename1 is the source path to the file and filename2 is the destination path to the file.\nAlso it can be used for rename a file.\nmv old_name new_name r. rm Removes a file. Using this command on a directory gives you an error. rm: directory: is a directory To remove a directory you have to pass -r which will remove the content of the directory recursively. Optionally you can use -f flag to force the deletion i.e. without any confirmations etc.\nrm filename s. tail Outputs the last 10 lines of file. Use -f to output appended data as the file grows.\ntail filename t. touch Updates access and modification time stamps of your file. If it doesn\u0026rsquo;t exists, it\u0026rsquo;ll be created.\ntouch filename Example:\n$ touch trick.md 1.2. Text Operations awk cut echo egrep fgrep fmt grep nl sed sort tr uniq wc a. awk awk is the most useful command for handling text files. It operates on an entire file line by line. By default it uses whitespace to separate the fields. The most common syntax for awk command is\nawk \u0026#39;/search_pattern/ { action_to_take_if_pattern_matches; }\u0026#39; file_to_parse Lets take following file /etc/passwd. Here\u0026rsquo;s the sample data that this file contains:\nroot:x:0:0:root:/root:/usr/bin/zsh daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync So now lets get only username from this file. Where -F specifies that on which base we are going to separate the fields. In our case it\u0026rsquo;s :. { print $1 } means print out the first matching field.\nawk -F\u0026#39;:\u0026#39; \u0026#39;{ print $1 }\u0026#39; /etc/passwd After running the above command you will get following output.\nroot daemon bin sys sync For more detail on how to use awk, check following link.\nb. cut Remove sections from each line of files\nexample.txt\nred riding hood went to the park to play show me columns 2 , 7 , and 9 with a space as a separator\ncut -d \u0026#34; \u0026#34; -f2,7,9 example.txt riding park play c. echo Display a line of text\ndisplay \u0026ldquo;Hello World\u0026rdquo;\necho Hello World Hello World display \u0026ldquo;Hello World\u0026rdquo; with newlines between words\necho -ne \u0026#34;Hello\\nWorld\\n\u0026#34; Hello World d. egrep Print lines matching a pattern - Extended Expression (alias for: \u0026lsquo;grep -E\u0026rsquo;)\nexample.txt\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. display lines that have either \u0026ldquo;Lorem\u0026rdquo; or \u0026ldquo;dolor\u0026rdquo; in them.\negrep \u0026#39;(Lorem|dolor)\u0026#39; example.txt or grep -E \u0026#39;(Lorem|dolor)\u0026#39; example.txt Lorem ipsum dolor sit amet, et dolore magna duo dolores et ea sanctus est Lorem ipsum dolor sit e. fgrep Print lines matching a pattern - FIXED pattern matching (alias for: \u0026lsquo;grep -F\u0026rsquo;)\nexample.txt\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor foo (Lorem|dolor) invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Find the exact string \u0026lsquo;(Lorem|dolor)\u0026rsquo; in example.txt\nfgrep \u0026#39;(Lorem|dolor)\u0026#39; example.txt or grep -F \u0026#39;(Lorem|dolor)\u0026#39; example.txt foo (Lorem|dolor) f. fmt Simple optimal text formatter\nexample: example.txt (1 line)\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. output the lines of example.txt to 20 character width\ncat example.txt | fmt -w 20 Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. g. grep Looks for text inside files. You can use grep to search for lines of text that match one or many regular expressions, and outputs only the matching lines.\ngrep pattern filename Example:\n$ grep admin /etc/passwd _kadmin_admin:*:218:-2:Kerberos Admin Service:/var/empty:/usr/bin/false _kadmin_changepw:*:219:-2:Kerberos Change Password Service:/var/empty:/usr/bin/false _krb_kadmin:*:231:-2:Open Directory Kerberos Admin Service:/var/empty:/usr/bin/false You can also force grep to ignore word case by using -i option. -r can be used to search all files under the specified directory, for example:\n$ grep -r admin /etc/ And -w to search for words only. For more detail on grep, check following link.\nh. nl Number lines of files\nexample.txt\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. show example.txt with line numbers\nnl -s\u0026#34;. \u0026#34; example.txt 1. Lorem ipsum 2. dolor sit amet, 3. consetetur 4. sadipscing elitr, 5. sed diam nonumy 6. eirmod tempor 7. invidunt ut labore 8. et dolore magna 9. aliquyam erat, sed 10. diam voluptua. At 11. vero eos et 12. accusam et justo 13. duo dolores et ea 14. rebum. Stet clita 15. kasd gubergren, 16. no sea takimata 17. sanctus est Lorem 18. ipsum dolor sit 19. amet. i. sed Stream editor for filtering and transforming text\nexample.txt\nHello This is a Test 1 2 3 4 replace all spaces with hyphens\nsed \u0026#39;s/ /-/g\u0026#39; example.txt Hello-This-is-a-Test-1-2-3-4 replace all digits with \u0026ldquo;d\u0026rdquo;\nsed \u0026#39;s/[0-9]/d/g\u0026#39; example.txt Hello This is a Test d d d d j. sort Sort lines of text files\nexample.txt\nf b c g a e d sort example.txt\nsort example.txt a b c d e f g randomize a sorted example.txt\nsort example.txt | sort -R b f a c d g e k. tr Translate or delete characters\nexample.txt\nHello World Foo Bar Baz! take all lower case letters and make them upper case\ncat example.txt | tr \u0026#39;a-z\u0026#39; \u0026#39;A-Z\u0026#39; HELLO WORLD FOO BAR BAZ! take all spaces and make them into newlines\ncat example.txt | tr \u0026#39; \u0026#39; \u0026#39;\\n\u0026#39; Hello World Foo Bar Baz! l. uniq Report or omit repeated lines\nexample.txt\na a b a b c d c show only unique lines of example.txt (first you need to sort it, otherwise it won\u0026rsquo;t see the overlap)\nsort example.txt | uniq a b c d show the unique items for each line, and tell me how many instances it found\nsort example.txt | uniq -c 3 a 2 b 2 c 1 d m. wc Tells you how many lines, words and characters there are in a file.\nwc filename Example:\n$ wc demo.txt 7459 15915 398400 demo.txt Where 7459 is lines, 15915 is words and 398400 is characters.\n1.3. Directory Operations cd mkdir pwd a. cd Moves you from one directory to other. Running this\n$ cd moves you to home directory. This command accepts an optional dirname, which moves you to that directory.\ncd dirname b. mkdir Makes a new directory.\nmkdir dirname You can use this to create multiple directories at once within your current directory.\nmkdir 1stDirectory 2ndDirectory 3rdDirectory You can also use this to create parent directories at the same time. For instance, if you wanted a directory named \u0026lsquo;project1\u0026rsquo; in another subdirectory at \u0026lsquo;/samples/bash/projects/\u0026rsquo;, you could run:\nmkdir /samples/bash/projects/project1 If any of these directories did no already exist, they would be created as well.\nc. pwd Tells you which directory you currently are in.\npwd 1.4. SSH, System Info \u0026amp; Network Operations bg cal date df dig du fg finger jobs last man passwd ping ps quota scp ssh top uname uptime w wget whoami whois a. bg Lists stopped or background jobs; resume a stopped job in the background.\nb. cal Shows the month\u0026rsquo;s calendar.\nc. date Shows the current date and time.\nd. df Shows disk usage.\ne. dig Gets DNS information for domain.\ndig domain f. du Shows the disk usage of files or directories. For more information on this command check this link\ndu [option] [filename|directory] Options:\n-h (human readable) Displays output it in kilobytes (K), megabytes (M) and gigabytes (G). -s (supress or summarize) Outputs total disk space of a directory and supresses reports for subdirectories. Example:\ndu -sh pictures 1.4M pictures g. fg Brings the most recent job in the foreground.\nh. finger Displays information about user.\nfinger username i. jobs Lists the jobs running in the background, giving the job number.\nj. last Lists your last logins of specified user.\nlast yourUsername k. man Shows the manual for specified command.\nman command l. passwd Allows the current logged user to change their password.\nm. ping Pings host and outputs results.\nping host n. ps Lists your processes.\nps -u yourusername Use the flags ef. e for every process and f for full listing.\nps -ef o. quota Shows what your disk quota is.\nquota -v p. scp Transfer files between a local host and a remote host or between two remote hosts.\ncopy from local host to remote host\nscp source_file user@host:directory/target_file copy from remote host to local host\nscp user@host:directory/source_file target_file scp -r user@host:directory/source_folder target_folder This command also accepts an option -P that can be used to connect to specific port.\nscp -P port user@host:directory/source_file target_file q. ssh ssh (SSH client) is a program for logging into and executing commands on a remote machine.\nssh user@host This command also accepts an option -p that can be used to connect to specific port.\nssh -p port user@host r. top Displays your currently active processes.\ns. uname Shows kernel information.\nuname -a t. uptime Shows current uptime.\nu. w Displays who is online.\nv. wget Downloads file.\nwget file w. whoami Return current logged in username.\nx. whois Gets whois information for domain.\nwhois domain 1.5. Process Monitoring Operations kill killall \u0026amp; nohup a. kill Kills (ends) the processes with the ID you gave.\nkill PID b. killall Kill all processes with the name.\nkillall processname c. \u0026amp; The \u0026amp; symbol instructs the command to run as a background process in a subshell.\ncommand \u0026amp; d. nohup nohup stands for \u0026ldquo;No Hang Up\u0026rdquo;. This allows to run command/process or shell script that can continue running in the background after you log out from a shell.\nnohup command Combine it with \u0026amp; to create background processes\nnohup command \u0026amp; 2. Basic Shell Programming The first line that you will write in bash script files is called shebang. This line in any script determines the script\u0026rsquo;s ability to be executed like a standalone executable without typing sh, bash, python, php etc beforehand in the terminal.\n#!/usr/bin/env bash 2.1. Variables Creating variables in bash is similar to other languages. There are no data types. A variable in bash can contain a number, a character, a string of characters, etc. You have no need to declare a variable, just assigning a value to its reference will create it.\nExample:\nstr=\u0026#34;hello world\u0026#34; The above line creates a variable str and assigns \u0026ldquo;hello world\u0026rdquo; to it. The value of variable is retrieved by putting the $ in the beginning of variable name.\nExample:\necho $str # hello world 2.2. Array Like other languages bash has also arrays. An array is a variable containing multiple values. There\u0026rsquo;s no maximum limit on the size of array. Arrays in bash are zero based. The first element is indexed with element 0. There are several ways for creating arrays in bash which are given below.\nExamples:\narray[0]=val array[1]=val array[2]=val array=([2]=val [0]=val [1]=val) array=(val val val) To display a value at specific index use following syntax:\n${array[i]} # where i is the index If no index is supplied, array element 0 is assumed. To find out how many values there are in the array use the following syntax:\n${#array[@]} Bash has also support for the ternary conditions. Check some examples below.\n${varname:-word} # if varname exists and isn\u0026#39;t null, return its value; otherwise return word ${varname:=word} # if varname exists and isn\u0026#39;t null, return its value; otherwise set it word and then return its value ${varname:+word} # if varname exists and isn\u0026#39;t null, return word; otherwise return null ${varname:offset:length} # performs substring expansion. It returns the substring of $varname starting at offset and up to length characters 2.3 String Substitution Check some of the syntax on how to manipulate strings\n${variable#pattern} # if the pattern matches the beginning of the variable\u0026#39;s value, delete the shortest part that matches and return the rest ${variable##pattern} # if the pattern matches the beginning of the variable\u0026#39;s value, delete the longest part that matches and return the rest ${variable%pattern} # if the pattern matches the end of the variable\u0026#39;s value, delete the shortest part that matches and return the rest ${variable%%pattern} # if the pattern matches the end of the variable\u0026#39;s value, delete the longest part that matches and return the rest ${variable/pattern/string} # the longest match to pattern in variable is replaced by string. Only the first match is replaced ${variable//pattern/string} # the longest match to pattern in variable is replaced by string. All matches are replaced ${#varname} # returns the length of the value of the variable as a character string 2.4. Functions As in almost any programming language, you can use functions to group pieces of code in a more logical way or practice the divine art of recursion. Declaring a function is just a matter of writing function my_func { my_code }. Calling a function is just like calling another program, you just write its name.\nfunction name() { shell commands } Example:\n#!/bin/bash function hello { echo world! } hello function say { echo $1 } say \u0026#34;hello world!\u0026#34; When you run the above example the hello function will output \u0026ldquo;world!\u0026rdquo;. The above two functions hello and say are identical. The main difference is function say. This function, prints the first argument it receives. Arguments, within functions, are treated in the same manner as arguments given to the script.\n2.5. Conditionals The conditional statement in bash is similar to other programming languages. Conditions have many form like the most basic form is if expression then statement where statement is only executed if expression is true.\nif [ expression ]; then will execute only if expression is true else will execute if expression is false fi Sometime if conditions becoming confusing so you can write the same condition using the case statements.\ncase expression in pattern1 ) statements ;; pattern2 ) statements ;; ... esac Expression Examples:\nstatement1 \u0026amp;\u0026amp; statement2 # both statements are true statement1 || statement2 # at least one of the statements is true str1=str2 # str1 matches str2 str1!=str2 # str1 does not match str2 str1\u0026lt;str2 # str1 is less than str2 str1\u0026gt;str2 # str1 is greater than str2 -n str1 # str1 is not null (has length greater than 0) -z str1 # str1 is null (has length 0) -a file # file exists -d file # file exists and is a directory -e file # file exists; same -a -f file # file exists and is a regular file (i.e., not a directory or other special type of file) -r file # you have read permission -s file # file exists and is not empty -w file # you have write permission -x file # you have execute permission on file, or directory search permission if it is a directory -N file # file was modified since it was last read -O file # you own file -G file # file\u0026#39;s group ID matches yours (or one of yours, if you are in multiple groups) file1 -nt file2 # file1 is newer than file2 file1 -ot file2 # file1 is older than file2 -lt # less than -le # less than or equal -eq # equal -ge # greater than or equal -gt # greater than -ne # not equal 2.6. Loops There are three types of loops in bash. for, while and until.\nDifferent for Syntax:\nfor x := 1 to 10 do begin statements end for name [in list] do statements that can use $name done for (( initialisation ; ending condition ; update )) do statements... done while Syntax:\nwhile condition; do statements done until Syntax:\nuntil condition; do statements done 3. Tricks Set an alias Run nano ~/.bash_profile and add the following line:\nalias dockerlogin=\u0026#39;ssh www-data@adnan.local -p2222\u0026#39; # add your alias in .bash_profile To quickly go to a specific directory Run nano ~/.bashrc and add the following line:\nexport hotellogs=\u0026#34;/workspace/hotel-api/storage/logs\u0026#34; Now you can use the saved path:\nsource ~/.bashrc cd $hotellogs Re-execute the previous command This goes back to the days before you could rely on keyboards to have an \u0026ldquo;up\u0026rdquo; arrow key, but can still be useful. To run the last command in your history\n!! A common error is to forget to use sudo to prefix a command requiring privileged execution. Instead of typing the whole command again, you can:\nsudo !! This would change a mkdir somedir into sudo mkdir somedir.\nExit traps Make your bash scripts more robust by reliably performing cleanup.\nfunction finish { # your cleanup here. e.g. kill any forked processes jobs -p | xargs kill } trap finish EXIT Saving your environment variables When you do export FOO = BAR, your variable is only exported in this current shell and all its children, to persist in the future you can simply append in your ~/.bash_profile file the command to export your variable\necho export FOO=BAR \u0026gt;\u0026gt; ~/.bash_profile Accessing your scripts You can easily access your scripts by creating a bin folder in your home with mkdir ~/bin, now all the scripts you put in this folder you can access in any directory.\nIf you can not access, try append the code below in your ~/.bash_profile file and after do source ~/.bash_profile.\n# set PATH so it includes user\u0026#39;s private bin if it exists if [ -d \u0026#34;$HOME/bin\u0026#34; ] ; then PATH=\u0026#34;$HOME/bin:$PATH\u0026#34; fi 4. Debugging You can easily debug the bash script by passing different options to bash command. For example -n will not run commands and check for syntax errors only. -v echo commands before running them. -x echo commands after command-line processing.\nbash -n scriptname bash -v scriptname bash -x scriptname ","permalink":"https://hauptling12.github.io/vimmart/posts/bash-guide/","tags":["bash","shell","scripting"],"title":"Bash Guide"},{"categories":["Programming"],"contents":"In this article, we will see the various deprecated Html tags \u0026amp; their alternative tags in HTML5. Deprecated tags are those tags that are allowed, but not recommended for use and are being replaced by newer ones. The tag or attributes depreciated when the same attributes are achieved in some other way. Several reasons for being discarded \u0026amp; uses the newer one:\nThere are several tags that help to achieve the same task. For this reason, the length of the source code is also reduced \u0026amp; hence improve the overall performance. Managing the large size code will be difficult \u0026amp; modifying such a source code will not be possible at once. This can increase the time for development as well as ambiguity in the code. Sometimes, it might happen if we need to use a particular block of code to perform a specific task then we may need to re-write the code again. All these factors help to increase the complexity as well as the development time which is not worth the development process. For this, several tags \u0026amp; attributes were introduced in HTML5. Here is a complete list of deprecated tags are discussed below.\nHTML 5 Deprecated Tag: Complete list of deprecated tags are given below.\nTAGS\u0026nbsp;DESCRIPTIONS \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;ALTERNATIVE TAGS\u0026lt;basefont\u0026gt;To Specify a basefont.font style sheets.\u0026lt;font\u0026gt;It specifies font text, size and color.font-family, font-size, color.\u0026lt;center\u0026gt;It specifies a centered Text.text-align:center.\u0026lt;strike\u0026gt;It specifies a strike-through text.text-decoration.\u0026lt;big\u0026gt;Defines big text.Use CSS properties or Heading tags.\u0026lt;dir\u0026gt;It specifies a directory list.ul tag.\u0026lt;isindex\u0026gt;It specifies a single-line input field.form tag.\u0026lt;applet\u0026gt;It specifies an applet.object tag.\u0026lt;acronym\u0026gt;\u0026nbsp;An acronym is defined using this tag.Use abbr.\u0026nbsp;\u0026lt;noframe\u0026gt;It is used to define a noframe section.Either use an iframe and CSS instead or use server-side include to generate complete pages with the various invariant parts merged in.\u0026lt;xmp\u0026gt;Renders text between the start and end tags without interpreting the HTML in between and using a monospaced font.Use pre and code instead.A tag makes it easy to supply alternative content that tells users what they are missing.Use object instead of embed when fallback is necessary.\u0026lt;plaintext\u0026gt;It is used to render all text in the document exactly as it was typed in.Use the “text/plain” MIME type instead.\u0026lt;frameset\u0026gt;It specifies a set of frames.Either use iframe and CSS instead or use server-side include to generate complete pages with the various invariant parts merged in.\u0026lt;frame\u0026gt;It specifies a frame.Either use iframe and CSS instead or use server-side include to generate complete pages with the various invariant parts merged in.\u0026lt;u\u0026gt;It specifies an underlined text.text-decoration.\u0026lt;tt\u0026gt;Defines teletype text.Use CSS properties.\u0026lt;s\u0026gt;Specify a strike-through text.text-decoration. HTML Deprecated Attributes: Several tag attributes are also removed. Following is the table having removed attributed and their corresponding impacted tags (elements) ie. elements from which those attributes have been removed permanently.\nREMOVED ATTRIBUTESTAGS IMPACTEDALTERNATIVESreva, linkUse the rel attribute.\nlongdescimg, iframeUse a regular element to link to the description.\nversionHtmlUnnecessary, not required to mention.\ncharseta, linkUse an HTTP Content-Type header on the linked resource instead.\n\u0026nbsp;namea, imgUse the id attribute instead.\nnohrefareaOmitting the href attribute is sufficient. The nohref attribute is unnecessary, not required to mention.\nusemapinputUse img instead of input for image maps.\ntargetlinkUnnecessary, not required to mention.\nschememetaUse only one scheme per field, or make the scheme declaration part of the value.\ncodetypeobjectUse the data and type attributes to invoke plugins.\ndeclareobjectRepeat the object element completely each time the resource is to be reused.\nstandbyobjectOptimise the linked resource so that it loads quickly or, at least, incrementally.\nvaluetypeparamWithout declaring value types, use name and value attributes.\nlanguagescriptUse the type attribute.\nabbrtd, thUse text that begins in an unambiguous and terse manner, and include any more elaborate text after that.\naxistd, thScope attribute should be used.\n","permalink":"https://hauptling12.github.io/vimmart/posts/what-are-the-html-tags-that-deprecated-in-html5/","tags":["html5"],"title":"What Are the Html Tags That Deprecated in Html5?"},{"categories":["Linux","Programming"],"contents":"\npure sh bible A collection of pure POSIX sh alternatives to external processes.\nThe snippets below are all linted using shellcheck.\nTable of Contents STRINGS Strip pattern from start of string Strip pattern from end of string Trim leading and trailing white-space from string Trim all white-space from string and truncate spaces Check if string contains a sub-string Check if string starts with sub-string Check if string ends with sub-string Split a string on a delimiter Trim quotes from a string FILES Parsing a key=val file. Get the first N lines of a file Get the number of lines in a file Count files or directories in directory Create an empty file FILE PATHS Get the directory name of a file path Get the base-name of a file path LOOPS Loop over a (small) range of numbers Loop over a variable range of numbers Loop over the contents of a file Loop over files and directories VARIABLES Name a variable based on another variable ESCAPE SEQUENCES Text Colors Text Attributes Cursor Movement Erasing Text PARAMETER EXPANSION Prefix and Suffix Deletion Length Default Value CONDITIONAL EXPRESSIONS File Conditionals Variable Conditionals Variable Comparisons ARITHMETIC OPERATORS Assignment Arithmetic Bitwise Logical Miscellaneous ARITHMETIC Ternary Tests Check if a number is a float Check if a number is an integer TRAPS Do something on script exit Ignore terminal interrupt (CTRL+C, SIGINT) OBSOLETE SYNTAX Command Substitution INTERNAL AND ENVIRONMENT VARIABLES Open the user\u0026rsquo;s preferred text editor Get the current working directory Get the PID of the current shell Get the current shell options AFTERWORD STRINGS Strip pattern from start of string Example Function:\nlstrip() { # Usage: lstrip \u0026#34;string\u0026#34; \u0026#34;pattern\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${1##$2}\u0026#34; } Example Usage:\n$ lstrip \u0026#34;The Quick Brown Fox\u0026#34; \u0026#34;The \u0026#34; Quick Brown Fox Strip pattern from end of string Example Function:\nrstrip() { # Usage: rstrip \u0026#34;string\u0026#34; \u0026#34;pattern\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${1%%$2}\u0026#34; } Example Usage:\n$ rstrip \u0026#34;The Quick Brown Fox\u0026#34; \u0026#34; Fox\u0026#34; The Quick Brown Trim leading and trailing white-space from string This is an alternative to sed, awk, perl and other tools. The function below works by finding all leading and trailing white-space and removing it from the start and end of the string.\nExample Function:\ntrim_string() { # Usage: trim_string \u0026#34; example string \u0026#34; # Remove all leading white-space. # \u0026#39;${1%%[![:space:]]*}\u0026#39;: Strip everything but leading white-space. # \u0026#39;${1#${XXX}}\u0026#39;: Remove the white-space from the start of the string. trim=${1#${1%%[![:space:]]*}} # Remove all trailing white-space. # \u0026#39;${trim##*[![:space:]]}\u0026#39;: Strip everything but trailing white-space. # \u0026#39;${trim%${XXX}}\u0026#39;: Remove the white-space from the end of the string. trim=${trim%${trim##*[![:space:]]}} printf \u0026#39;%s\\n\u0026#39; \u0026#34;$trim\u0026#34; } Example Usage:\n$ trim_string \u0026#34; Hello, World \u0026#34; Hello, World $ name=\u0026#34; John Black \u0026#34; $ trim_string \u0026#34;$name\u0026#34; John Black Trim all white-space from string and truncate spaces This is an alternative to sed, awk, perl and other tools. The function below works by abusing word splitting to create a new string without leading/trailing white-space and with truncated spaces.\nExample Function:\n# shellcheck disable=SC2086,SC2048 trim_all() { # Usage: trim_all \u0026#34; example string \u0026#34; # Disable globbing to make the word-splitting below safe. set -f # Set the argument list to the word-splitted string. # This removes all leading/trailing white-space and reduces # all instances of multiple spaces to a single (\u0026#34; \u0026#34; -\u0026gt; \u0026#34; \u0026#34;). set -- $* # Print the argument list as a string. printf \u0026#39;%s\\n\u0026#39; \u0026#34;$*\u0026#34; # Re-enable globbing. set +f } Example Usage:\n$ trim_all \u0026#34; Hello, World \u0026#34; Hello, World $ name=\u0026#34; John Black is my name. \u0026#34; $ trim_all \u0026#34;$name\u0026#34; John Black is my name. Check if string contains a sub-string Using a case statement:\ncase $var in *sub_string1*) # Do stuff ;; *sub_string2*) # Do other stuff ;; *) # Else ;; esac Check if string starts with sub-string Using a case statement:\ncase $var in sub_string1*) # Do stuff ;; sub_string2*) # Do other stuff ;; *) # Else ;; esac Check if string ends with sub-string Using a case statement:\ncase $var in *sub_string1) # Do stuff ;; *sub_string2) # Do other stuff ;; *) # Else ;; esac Split a string on a delimiter This is an alternative to cut, awk and other tools.\nExample Function:\nsplit() { # Disable globbing. # This ensures that the word-splitting is safe. set -f # Store the current value of \u0026#39;IFS\u0026#39; so we # can restore it later. old_ifs=$IFS # Change the field separator to what we\u0026#39;re # splitting on. IFS=$2 # Create an argument list splitting at each # occurance of \u0026#39;$2\u0026#39;. # # This is safe to disable as it just warns against # word-splitting which is the behavior we expect. # shellcheck disable=2086 set -- $1 # Print each list value on its own line. printf \u0026#39;%s\\n\u0026#39; \u0026#34;$@\u0026#34; # Restore the value of \u0026#39;IFS\u0026#39;. IFS=$old_ifs # Re-enable globbing. set +f } Example Usage:\n$ split \u0026#34;apples,oranges,pears,grapes\u0026#34; \u0026#34;,\u0026#34; apples oranges pears grapes $ split \u0026#34;1, 2, 3, 4, 5\u0026#34; \u0026#34;, \u0026#34; 1 2 3 4 5 Trim quotes from a string Example Function:\ntrim_quotes() { # Usage: trim_quotes \u0026#34;string\u0026#34; # Disable globbing. # This makes the word-splitting below safe. set -f # Store the current value of \u0026#39;IFS\u0026#39; so we # can restore it later. old_ifs=$IFS # Set \u0026#39;IFS\u0026#39; to [\u0026#34;\u0026#39;]. IFS=\\\u0026#34;\\\u0026#39; # Create an argument list, splitting the # string at [\u0026#34;\u0026#39;]. # # Disable this shellcheck error as it only # warns about word-splitting which we expect. # shellcheck disable=2086 set -- $1 # Set \u0026#39;IFS\u0026#39; to blank to remove spaces left # by the removal of [\u0026#34;\u0026#39;]. IFS= # Print the quote-less string. printf \u0026#39;%s\\n\u0026#39; \u0026#34;$*\u0026#34; # Restore the value of \u0026#39;IFS\u0026#39;. IFS=$old_ifs # Re-enable globbing. set +f } Example Usage:\n$ var=\u0026#34;\u0026#39;Hello\u0026#39;, \\\u0026#34;World\\\u0026#34;\u0026#34; $ trim_quotes \u0026#34;$var\u0026#34; Hello, World FILES Parsing a key=val file. This could be used to parse a simple key=value configuration file.\n# Setting \u0026#39;IFS\u0026#39; tells \u0026#39;read\u0026#39; where to split the string. while IFS=\u0026#39;=\u0026#39; read -r key val; do # Skip over lines containing comments. # (Lines starting with \u0026#39;#\u0026#39;). [ \u0026#34;${key##\\#*}\u0026#34; ] || continue # \u0026#39;$key\u0026#39; stores the key. # \u0026#39;$val\u0026#39; stores the value. printf \u0026#39;%s: %s\\n\u0026#39; \u0026#34;$key\u0026#34; \u0026#34;$val\u0026#34; # Alternatively replacing \u0026#39;printf\u0026#39; with the following # populates variables called \u0026#39;$key\u0026#39; with the value of \u0026#39;$val\u0026#39;. # # NOTE: I would extend this with a check to ensure \u0026#39;key\u0026#39; is # a valid variable name. # export \u0026#34;$key=$val\u0026#34; # # Example with error handling: # export \u0026#34;$key=$val\u0026#34; 2\u0026gt;/dev/null || # printf \u0026#39;warning %s is not a valid variable name\\n\u0026#39; \u0026#34;$key\u0026#34; done \u0026lt; \u0026#34;file\u0026#34; Get the first N lines of a file Alternative to the head command.\nExample Function:\nhead() { # Usage: head \u0026#34;n\u0026#34; \u0026#34;file\u0026#34; while IFS= read -r line; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$line\u0026#34; i=$((i+1)) [ \u0026#34;$i\u0026#34; = \u0026#34;$1\u0026#34; ] \u0026amp;\u0026amp; return done \u0026lt; \u0026#34;$2\u0026#34; # \u0026#39;read\u0026#39; used in a loop will skip over # the last line of a file if it does not contain # a newline and instead contains EOF. # # The final line iteration is skipped as \u0026#39;read\u0026#39; # exits with \u0026#39;1\u0026#39; when it hits EOF. \u0026#39;read\u0026#39; however, # still populates the variable. # # This ensures that the final line is always printed # if applicable. [ -n \u0026#34;$line\u0026#34; ] \u0026amp;\u0026amp; printf %s \u0026#34;$line\u0026#34; } Example Usage:\n$ head 2 ~/.bashrc # Prompt PS1=\u0026#39;➜ \u0026#39; $ head 1 ~/.bashrc # Prompt Get the number of lines in a file Alternative to wc -l.\nExample Function:\nlines() { # Usage: lines \u0026#34;file\u0026#34; # \u0026#39;|| [ -n \u0026#34;$line\u0026#34; ]\u0026#39;: This ensures that lines # ending with EOL instead of a newline are still # operated on in the loop. # # \u0026#39;read\u0026#39; exits with \u0026#39;1\u0026#39; when it sees EOL and # without the added test, the line isn\u0026#39;t sent # to the loop. while IFS= read -r line || [ -n \u0026#34;$line\u0026#34; ]; do lines=$((lines+1)) done \u0026lt; \u0026#34;$1\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;$lines\u0026#34; } Example Usage:\n$ lines ~/.bashrc 48 Count files or directories in directory This works by passing the output of the glob to the function and then counting the number of arguments.\nExample Function:\ncount() { # Usage: count /path/to/dir/* # count /path/to/dir/*/ [ -e \u0026#34;$1\u0026#34; ] \\ \u0026amp;\u0026amp; printf \u0026#39;%s\\n\u0026#39; \u0026#34;$#\u0026#34; \\ || printf \u0026#39;%s\\n\u0026#39; 0 } Example Usage:\n# Count all files in dir. $ count ~/Downloads/* 232 # Count all dirs in dir. $ count ~/Downloads/*/ 45 # Count all jpg files in dir. $ count ~/Pictures/*.jpg 64 Create an empty file Alternative to touch.\n:\u0026gt;file # OR (shellcheck warns for this) \u0026gt;file FILE PATHS Get the directory name of a file path Alternative to the dirname command.\nExample Function:\ndirname() { # Usage: dirname \u0026#34;path\u0026#34; # If \u0026#39;$1\u0026#39; is empty set \u0026#39;dir\u0026#39; to \u0026#39;.\u0026#39;, else \u0026#39;$1\u0026#39;. dir=${1:-.} # Strip all trailing forward-slashes \u0026#39;/\u0026#39; from # the end of the string. # # \u0026#34;${dir##*[!/]}\u0026#34;: Remove all non-forward-slashes # from the start of the string, leaving us with only # the trailing slashes. # \u0026#34;${dir%%\u0026#34;${}\u0026#34;}\u0026#34;: Remove the result of the above # substitution (a string of forward slashes) from the # end of the original string. dir=${dir%%\u0026#34;${dir##*[!/]}\u0026#34;} # If the variable *does not* contain any forward slashes # set its value to \u0026#39;.\u0026#39;. [ \u0026#34;${dir##*/*}\u0026#34; ] \u0026amp;\u0026amp; dir=. # Remove everything *after* the last forward-slash \u0026#39;/\u0026#39;. dir=${dir%/*} # Again, strip all trailing forward-slashes \u0026#39;/\u0026#39; from # the end of the string (see above). dir=${dir%%\u0026#34;${dir##*[!/]}\u0026#34;} # Print the resulting string and if it is empty, # print \u0026#39;/\u0026#39;. printf \u0026#39;%s\\n\u0026#39; \u0026#34;${dir:-/}\u0026#34; } Example Usage:\n$ dirname ~/Pictures/Wallpapers/1.jpg /home/black/Pictures/Wallpapers/ $ dirname ~/Pictures/Downloads/ /home/black/Pictures/ Get the base-name of a file path Alternative to the basename command.\nExample Function:\nbasename() { # Usage: basename \u0026#34;path\u0026#34; [\u0026#34;suffix\u0026#34;] # Strip all trailing forward-slashes \u0026#39;/\u0026#39; from # the end of the string. # # \u0026#34;${1##*[!/]}\u0026#34;: Remove all non-forward-slashes # from the start of the string, leaving us with only # the trailing slashes. # \u0026#34;${1%%\u0026#34;${}\u0026#34;}: Remove the result of the above # substitution (a string of forward slashes) from the # end of the original string. dir=${1%${1##*[!/]}} # Remove everything before the final forward-slash \u0026#39;/\u0026#39;. dir=${dir##*/} # If a suffix was passed to the function, remove it from # the end of the resulting string. dir=${dir%\u0026#34;$2\u0026#34;} # Print the resulting string and if it is empty, # print \u0026#39;/\u0026#39;. printf \u0026#39;%s\\n\u0026#39; \u0026#34;${dir:-/}\u0026#34; } Example Usage:\n$ basename ~/Pictures/Wallpapers/1.jpg 1.jpg $ basename ~/Pictures/Wallpapers/1.jpg .jpg 1 $ basename ~/Pictures/Downloads/ Downloads LOOPS Loop over a (small) range of numbers Alternative to seq and only suitable for small and static number ranges. The number list can also be replaced with a list of words, variables etc.\n# Loop from 0-10. for i in 0 1 2 3 4 5 6 7 8 9 10; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$i\u0026#34; done Loop over a variable range of numbers Alternative to seq.\n# Loop from var-var. start=0 end=50 while [ \u0026#34;$start\u0026#34; -le \u0026#34;$end\u0026#34; ]; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$start\u0026#34; start=$((start+1)) done Loop over the contents of a file while IFS= read -r line || [ -n \u0026#34;$line\u0026#34; ]; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$line\u0026#34; done \u0026lt; \u0026#34;file\u0026#34; Loop over files and directories Don’t use ls.\nCAVEAT: When the glob does not match anything (empty directory or no matching files) the variable will contain the unexpanded glob. To avoid working on unexpanded globs check the existence of the file contained in the variable using the appropriate file conditional. Be aware that symbolic links are resolved.\n# Greedy example. for file in *; do [ -e \u0026#34;$file\u0026#34; ] || [ -L \u0026#34;$file\u0026#34; ] || continue printf \u0026#39;%s\\n\u0026#39; \u0026#34;$file\u0026#34; done # PNG files in dir. for file in ~/Pictures/*.png; do [ -f \u0026#34;$file\u0026#34; ] || continue printf \u0026#39;%s\\n\u0026#39; \u0026#34;$file\u0026#34; done # Iterate over directories. for dir in ~/Downloads/*/; do [ -d \u0026#34;$dir\u0026#34; ] || continue printf \u0026#39;%s\\n\u0026#39; \u0026#34;$dir\u0026#34; done VARIABLES Name and access a variable based on another variable $ var=\u0026#34;world\u0026#34; $ eval \u0026#34;hello_$var=value\u0026#34; $ eval printf \u0026#39;%s\\n\u0026#39; \u0026#34;\\$hello_$var\u0026#34; value ESCAPE SEQUENCES Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using tput abstracts the same ANSI sequences as if printed manually. Worse still, tput is not actually portable. There are a number of tput variants each with different commands and syntaxes (try tput setaf 3 on a FreeBSD system). Raw sequences are fine.\nText Colors NOTE: Sequences requiring RGB values only work in True-Color Terminal Emulators.\nSequence What does it do? Value \\033[38;5;\u0026lt;NUM\u0026gt;m Set text foreground color. 0-255 \\033[48;5;\u0026lt;NUM\u0026gt;m Set text background color. 0-255 \\033[38;2;\u0026lt;R\u0026gt;;\u0026lt;G\u0026gt;;\u0026lt;B\u0026gt;m Set text foreground color to RGB color. R, G, B \\033[48;2;\u0026lt;R\u0026gt;;\u0026lt;G\u0026gt;;\u0026lt;B\u0026gt;m Set text background color to RGB color. R, G, B Text Attributes Sequence What does it do? \\033[m Reset text formatting and colors. \\033[1m Bold text. \\033[2m Faint text. \\033[3m Italic text. \\033[4m Underline text. \\033[5m Slow blink. \\033[7m Swap foreground and background colors. \\033[8m Hidden text. \\033[9m Strike-through text. Cursor Movement Sequence What does it do? Value \\033[\u0026lt;LINE\u0026gt;;\u0026lt;COLUMN\u0026gt;H Move cursor to absolute position. line, column \\033[H Move cursor to home position (0,0). \\033[\u0026lt;NUM\u0026gt;A Move cursor up N lines. num \\033[\u0026lt;NUM\u0026gt;B Move cursor down N lines. num \\033[\u0026lt;NUM\u0026gt;C Move cursor right N columns. num \\033[\u0026lt;NUM\u0026gt;D Move cursor left N columns. num \\033[s Save cursor position. \\033[u Restore cursor position. Erasing Text Sequence What does it do? \\033[K Erase from cursor position to end of line. \\033[1K Erase from cursor position to start of line. \\033[2K Erase the entire current line. \\033[J Erase from the current line to the bottom of the screen. \\033[1J Erase from the current line to the top of the screen. \\033[2J Clear the screen. \\033[2J\\033[H Clear the screen and move cursor to 0,0. PARAMETER EXPANSION Prefix and Suffix Deletion Parameter What does it do? ${VAR#PATTERN} Remove shortest match of pattern from start of string. ${VAR##PATTERN} Remove longest match of pattern from start of string. ${VAR%PATTERN} Remove shortest match of pattern from end of string. ${VAR%%PATTERN} Remove longest match of pattern from end of string. Length Parameter What does it do? ${#VAR} Length of var in characters. Default Value Parameter What does it do? ${VAR:-STRING} If VAR is empty or unset, use STRING as its value. ${VAR-STRING} If VAR is unset, use STRING as its value. ${VAR:=STRING} If VAR is empty or unset, set the value of VAR to STRING. ${VAR=STRING} If VAR is unset, set the value of VAR to STRING. ${VAR:+STRING} If VAR is not empty, use STRING as its value. ${VAR+STRING} If VAR is set, use STRING as its value. ${VAR:?STRING} Display an error if empty or unset. ${VAR?STRING} Display an error if unset. CONDITIONAL EXPRESSIONS For use in [ ] if [ ]; then and test.\nFile Conditionals Expression Value What does it do? -b file If file exists and is a block special file. -c file If file exists and is a character special file. -d file If file exists and is a directory. -e file If file exists. -f file If file exists and is a regular file. -g file If file exists and its set-group-id bit is set. -h file If file exists and is a symbolic link. -p file If file exists and is a named pipe (FIFO). -r file If file exists and is readable. -s file If file exists and its size is greater than zero. -t fd If file descriptor is open and refers to a terminal. -u file If file exists and its set-user-id bit is set. -w file If file exists and is writable. -x file If file exists and is executable. -L file If file exists and is a symbolic link. -S file If file exists and is a socket. Variable Conditionals Expression Value What does it do? -z var If the length of string is zero. -n var If the length of string is non-zero. Variable Comparisons Expression What does it do? var = var2 Equal to. var != var2 Not equal to. var -eq var2 Equal to (algebraically). var -ne var2 Not equal to (algebraically). var -gt var2 Greater than (algebraically). var -ge var2 Greater than or equal to (algebraically). var -lt var2 Less than (algebraically). var -le var2 Less than or equal to (algebraically). ARITHMETIC OPERATORS Assignment Operators What does it do? = Initialize or change the value of a variable. Arithmetic Operators What does it do? + Addition - Subtraction * Multiplication / Division % Modulo += Plus-Equal (Increment a variable.) -= Minus-Equal (Decrement a variable.) *= Times-Equal (Multiply a variable.) /= Slash-Equal (Divide a variable.) %= Mod-Equal (Remainder of dividing a variable.) Bitwise Operators What does it do? \u0026lt;\u0026lt; Bitwise Left Shift \u0026lt;\u0026lt;= Left-Shift-Equal \u0026gt;\u0026gt; Bitwise Right Shift \u0026gt;\u0026gt;= Right-Shift-Equal \u0026amp; Bitwise AND \u0026amp;= Bitwise AND-Equal | Bitwise OR |= Bitwise OR-Equal ~ Bitwise NOT ^ Bitwise XOR ^= Bitwise XOR-Equal Logical Operators What does it do? ! NOT \u0026amp;\u0026amp; AND || OR Miscellaneous Operators What does it do? Example , Comma Separator ((a=1,b=2,c=3)) ARITHMETIC Ternary Tests # Set the value of var to var2 if var2 is greater than var. # \u0026#39;var2 \u0026gt; var\u0026#39;: Condition to test. # \u0026#39;? var2\u0026#39;: If the test succeeds. # \u0026#39;: var\u0026#39;: If the test fails. var=$((var2 \u0026gt; var ? var2 : var)) Check if a number is a float Example Function:\nis_float() { # Usage: is_float \u0026#34;number\u0026#34; # The test checks to see that the input contains # a \u0026#39;.\u0026#39;. This filters out whole numbers. [ -z \u0026#34;${1##*.*}\u0026#34; ] \u0026amp;\u0026amp; printf %f \u0026#34;$1\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 } Example Usage:\n$ is_float 1 \u0026amp;\u0026amp; echo true $ $ is_float 1.1 \u0026amp;\u0026amp; echo true $ true Check if a number is an integer Example Function:\nis_int() { # usage: is_int \u0026#34;number\u0026#34; printf %d \u0026#34;$1\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 } Example Usage:\n$ is_int 1 \u0026amp;\u0026amp; echo true $ true $ is_int 1.1 \u0026amp;\u0026amp; echo true $ TRAPS Traps allow a script to execute code on various signals. In pxltrm (a pixel art editor written in bash) traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.\nTraps should be added near the start of scripts so any early errors are also caught.\nDo something on script exit # Clear screen on script exit. trap \u0026#39;printf \\\\033[2J\\\\033[H\\\\033[m\u0026#39; EXIT # Run a function on script exit. # \u0026#39;clean_up\u0026#39; is the name of a function. trap clean_up EXIT Ignore terminal interrupt (CTRL+C, SIGINT) trap \u0026#39;\u0026#39; INT OBSOLETE SYNTAX Command Substitution Use $() instead of ` `.\n# Right. var=\u0026#34;$(command)\u0026#34; # Wrong. var=`command` # $() can easily be nested whereas `` cannot. var=\u0026#34;$(command \u0026#34;$(command)\u0026#34;)\u0026#34; INTERNAL AND ENVIRONMENT VARIABLES Open the user\u0026rsquo;s preferred text editor \u0026#34;$EDITOR\u0026#34; \u0026#34;$file\u0026#34; # NOTE: This variable may be empty, set a fallback value. \u0026#34;${EDITOR:-vi}\u0026#34; \u0026#34;$file\u0026#34; Get the current working directory This is an alternative to the pwd built-in.\n\u0026#34;$PWD\u0026#34; Get the PID of the current shell \u0026#34;$$\u0026#34; Get the current shell options \u0026#34;$-\u0026#34; ","permalink":"https://hauptling12.github.io/vimmart/posts/ultimate-sh-cheatcheat/","tags":["shell","CLI","scripting","sh"],"title":"Ultimate Sh Cheatcheat"},{"categories":["Linux","Programming"],"contents":"Ultimate Bash cheatsheet A collection of pure bash alternatives to external processes.\nThe snippets below are linted using shellcheck and tests have been written where applicable.\nTable of Contents FOREWORD STRINGS Trim leading and trailing white-space from string Trim all white-space from string and truncate spaces Use regex on a string Split a string on a delimiter Change a string to lowercase Change a string to uppercase Reverse a string case Trim quotes from a string Strip all instances of pattern from string Strip first occurrence of pattern from string Strip pattern from start of string Strip pattern from end of string Percent-encode a string Decode a percent-encoded string Check if string contains a sub-string Check if string starts with sub-string Check if string ends with sub-string ARRAYS Reverse an array Remove duplicate array elements Random array element Cycle through an array Toggle between two values LOOPS Loop over a range of numbers Loop over a variable range of numbers Loop over an array Loop over an array with an index Loop over the contents of a file Loop over files and directories FILE HANDLING Read a file to a string Read a file to an array (by line) Get the first N lines of a file Get the last N lines of a file Get the number of lines in a file Count files or directories in directory Create an empty file Extract lines between two markers FILE PATHS Get the directory name of a file path Get the base-name of a file path VARIABLES Assign and access a variable using a variable Name a variable based on another variable ESCAPE SEQUENCES Text Colors Text Attributes Cursor Movement Erasing Text PARAMETER EXPANSION Indirection Replacement Length Expansion Case Modification Default Value BRACE EXPANSION Ranges String Lists CONDITIONAL EXPRESSIONS File Conditionals File Comparisons Variable Conditionals Variable Comparisons ARITHMETIC OPERATORS Assignment Arithmetic Bitwise Logical Miscellaneous ARITHMETIC Simpler syntax to set variables Ternary Tests TRAPS Do something on script exit Ignore terminal interrupt (CTRL+C, SIGINT) React to window resize Do something before every command Do something when a shell function or a sourced file finishes executing PERFORMANCE Disable Unicode OBSOLETE SYNTAX Shebang Command Substitution Function Declaration INTERNAL VARIABLES Get the location to the bash binary Get the version of the current running bash process Open the user\u0026rsquo;s preferred text editor Get the name of the current function Get the host-name of the system Get the architecture of the Operating System Get the name of the Operating System / Kernel Get the current working directory Get the number of seconds the script has been running Get a pseudorandom integer INFORMATION ABOUT THE TERMINAL Get the terminal size in lines and columns (from a script) Get the terminal size in pixels Get the current cursor position CONVERSION Convert a hex color to RGB Convert an RGB color to hex CODE GOLF Shorter for loop syntax Shorter infinite loops Shorter function declaration Shorter if syntax Simpler case statement to set variable OTHER Use read as an alternative to the sleep command Check if a program is in the user\u0026rsquo;s PATH Get the current date using strftime Get the username of the current user Generate a UUID V4 Progress bars Get the list of functions in a script Bypass shell aliases Bypass shell functions Run a command in the background Capture function return without command substitution AFTERWORD FOREWORD A collection of pure bash alternatives to external processes and programs. The bash scripting language is more powerful than people realise and most tasks can be accomplished without depending on external programs.\nCalling an external process in bash is expensive and excessive use will cause a noticeable slowdown. Scripts and programs written using built-in methods (where applicable) will be faster, require fewer dependencies and afford a better understanding of the language itself.\nThe contents of this book provide a reference for solving problems encountered when writing programs and scripts in bash. Examples are in function formats showcasing how to incorporate these solutions into code.\nSTRINGS Trim leading and trailing white-space from string This is an alternative to sed, awk, perl and other tools. The function below works by finding all leading and trailing white-space and removing it from the start and end of the string. The : built-in is used in place of a temporary variable.\nExample Function:\ntrim_string() { # Usage: trim_string \u0026#34; example string \u0026#34; : \u0026#34;${1#\u0026#34;${1%%[![:space:]]*}\u0026#34;}\u0026#34; : \u0026#34;${_%\u0026#34;${_##*[![:space:]]}\u0026#34;}\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;$_\u0026#34; } Example Usage:\n$ trim_string \u0026#34; Hello, World \u0026#34; Hello, World $ name=\u0026#34; John Black \u0026#34; $ trim_string \u0026#34;$name\u0026#34; John Black Trim all white-space from string and truncate spaces This is an alternative to sed, awk, perl and other tools. The function below works by abusing word splitting to create a new string without leading/trailing white-space and with truncated spaces.\nExample Function:\n# shellcheck disable=SC2086,SC2048 trim_all() { # Usage: trim_all \u0026#34; example string \u0026#34; set -f set -- $* printf \u0026#39;%s\\n\u0026#39; \u0026#34;$*\u0026#34; set +f } Example Usage:\n$ trim_all \u0026#34; Hello, World \u0026#34; Hello, World $ name=\u0026#34; John Black is my name. \u0026#34; $ trim_all \u0026#34;$name\u0026#34; John Black is my name. Use regex on a string The result of bash\u0026rsquo;s regex matching can be used to replace sed for a large number of use-cases.\nCAVEAT: This is one of the few platform dependent bash features. bash will use whatever regex engine is installed on the user\u0026rsquo;s system. Stick to POSIX regex features if aiming for compatibility.\nCAVEAT: This example only prints the first matching group. When using multiple capture groups some modification is needed.\nExample Function:\nregex() { # Usage: regex \u0026#34;string\u0026#34; \u0026#34;regex\u0026#34; [[ $1 =~ $2 ]] \u0026amp;\u0026amp; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${BASH_REMATCH[1]}\u0026#34; } Example Usage:\n$ # Trim leading white-space. $ regex \u0026#39; hello\u0026#39; \u0026#39;^\\s*(.*)\u0026#39; hello $ # Validate a hex color. $ regex \u0026#34;#FFFFFF\u0026#34; \u0026#39;^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$\u0026#39; #FFFFFF $ # Validate a hex color (invalid). $ regex \u0026#34;red\u0026#34; \u0026#39;^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$\u0026#39; # no output (invalid) Example Usage in script:\nis_hex_color() { if [[ $1 =~ ^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ ]]; then printf \u0026#39;%s\\n\u0026#39; \u0026#34;${BASH_REMATCH[1]}\u0026#34; else printf \u0026#39;%s\\n\u0026#39; \u0026#34;error: $1 is an invalid color.\u0026#34; return 1 fi } read -r color is_hex_color \u0026#34;$color\u0026#34; || color=\u0026#34;#FFFFFF\u0026#34; # Do stuff. Split a string on a delimiter CAVEAT: Requires bash 4+\nThis is an alternative to cut, awk and other tools.\nExample Function:\nsplit() { # Usage: split \u0026#34;string\u0026#34; \u0026#34;delimiter\u0026#34; IFS=$\u0026#39;\\n\u0026#39; read -d \u0026#34;\u0026#34; -ra arr \u0026lt;\u0026lt;\u0026lt; \u0026#34;${1//$2/$\u0026#39;\\n\u0026#39;}\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${arr[@]}\u0026#34; } Example Usage:\n$ split \u0026#34;apples,oranges,pears,grapes\u0026#34; \u0026#34;,\u0026#34; apples oranges pears grapes $ split \u0026#34;1, 2, 3, 4, 5\u0026#34; \u0026#34;, \u0026#34; 1 2 3 4 5 # Multi char delimiters work too! $ split \u0026#34;hello---world---my---name---is---john\u0026#34; \u0026#34;---\u0026#34; hello world my name is john Change a string to lowercase CAVEAT: Requires bash 4+\nExample Function:\nlower() { # Usage: lower \u0026#34;string\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${1,,}\u0026#34; } Example Usage:\n$ lower \u0026#34;HELLO\u0026#34; hello $ lower \u0026#34;HeLlO\u0026#34; hello $ lower \u0026#34;hello\u0026#34; hello Change a string to uppercase CAVEAT: Requires bash 4+\nExample Function:\nupper() { # Usage: upper \u0026#34;string\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${1^^}\u0026#34; } Example Usage:\n$ upper \u0026#34;hello\u0026#34; HELLO $ upper \u0026#34;HeLlO\u0026#34; HELLO $ upper \u0026#34;HELLO\u0026#34; HELLO Reverse a string case CAVEAT: Requires bash 4+\nExample Function:\nreverse_case() { # Usage: reverse_case \u0026#34;string\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${1~~}\u0026#34; } Example Usage:\n$ reverse_case \u0026#34;hello\u0026#34; HELLO $ reverse_case \u0026#34;HeLlO\u0026#34; hElLo $ reverse_case \u0026#34;HELLO\u0026#34; hello Trim quotes from a string Example Function:\ntrim_quotes() { # Usage: trim_quotes \u0026#34;string\u0026#34; : \u0026#34;${1//\\\u0026#39;}\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${_//\\\u0026#34;}\u0026#34; } Example Usage:\n$ var=\u0026#34;\u0026#39;Hello\u0026#39;, \\\u0026#34;World\\\u0026#34;\u0026#34; $ trim_quotes \u0026#34;$var\u0026#34; Hello, World Strip all instances of pattern from string Example Function:\nstrip_all() { # Usage: strip_all \u0026#34;string\u0026#34; \u0026#34;pattern\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${1//$2}\u0026#34; } Example Usage:\n$ strip_all \u0026#34;The Quick Brown Fox\u0026#34; \u0026#34;[aeiou]\u0026#34; Th Qck Brwn Fx $ strip_all \u0026#34;The Quick Brown Fox\u0026#34; \u0026#34;[[:space:]]\u0026#34; TheQuickBrownFox $ strip_all \u0026#34;The Quick Brown Fox\u0026#34; \u0026#34;Quick \u0026#34; The Brown Fox Strip first occurrence of pattern from string Example Function:\nstrip() { # Usage: strip \u0026#34;string\u0026#34; \u0026#34;pattern\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${1/$2}\u0026#34; } Example Usage:\n$ strip \u0026#34;The Quick Brown Fox\u0026#34; \u0026#34;[aeiou]\u0026#34; Th Quick Brown Fox $ strip \u0026#34;The Quick Brown Fox\u0026#34; \u0026#34;[[:space:]]\u0026#34; TheQuick Brown Fox Strip pattern from start of string Example Function:\nlstrip() { # Usage: lstrip \u0026#34;string\u0026#34; \u0026#34;pattern\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${1##$2}\u0026#34; } Example Usage:\n$ lstrip \u0026#34;The Quick Brown Fox\u0026#34; \u0026#34;The \u0026#34; Quick Brown Fox Strip pattern from end of string Example Function:\nrstrip() { # Usage: rstrip \u0026#34;string\u0026#34; \u0026#34;pattern\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${1%%$2}\u0026#34; } Example Usage:\n$ rstrip \u0026#34;The Quick Brown Fox\u0026#34; \u0026#34; Fox\u0026#34; The Quick Brown Percent-encode a string Example Function:\nurlencode() { # Usage: urlencode \u0026#34;string\u0026#34; local LC_ALL=C for (( i = 0; i \u0026lt; ${#1}; i++ )); do : \u0026#34;${1:i:1}\u0026#34; case \u0026#34;$_\u0026#34; in [a-zA-Z0-9.~_-]) printf \u0026#39;%s\u0026#39; \u0026#34;$_\u0026#34; ;; *) printf \u0026#39;%%%02X\u0026#39; \u0026#34;\u0026#39;$_\u0026#34; ;; esac done printf \u0026#39;\\n\u0026#39; } Example Usage:\n$ urlencode \u0026#34;https://github.com/dylanaraps/pure-bash-bible\u0026#34; https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible Decode a percent-encoded string Example Function:\nurldecode() { # Usage: urldecode \u0026#34;string\u0026#34; : \u0026#34;${1//+/ }\u0026#34; printf \u0026#39;%b\\n\u0026#39; \u0026#34;${_//%/\\\\x}\u0026#34; } Example Usage:\n$ urldecode \u0026#34;https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible\u0026#34; https://github.com/dylanaraps/pure-bash-bible Check if string contains a sub-string Using a test:\nif [[ $var == *sub_string* ]]; then printf \u0026#39;%s\\n\u0026#39; \u0026#34;sub_string is in var.\u0026#34; fi # Inverse (substring not in string). if [[ $var != *sub_string* ]]; then printf \u0026#39;%s\\n\u0026#39; \u0026#34;sub_string is not in var.\u0026#34; fi # This works for arrays too! if [[ ${arr[*]} == *sub_string* ]]; then printf \u0026#39;%s\\n\u0026#39; \u0026#34;sub_string is in array.\u0026#34; fi Using a case statement:\ncase \u0026#34;$var\u0026#34; in *sub_string*) # Do stuff ;; *sub_string2*) # Do more stuff ;; *) # Else ;; esac Check if string starts with sub-string if [[ $var == sub_string* ]]; then printf \u0026#39;%s\\n\u0026#39; \u0026#34;var starts with sub_string.\u0026#34; fi # Inverse (var does not start with sub_string). if [[ $var != sub_string* ]]; then printf \u0026#39;%s\\n\u0026#39; \u0026#34;var does not start with sub_string.\u0026#34; fi Check if string ends with sub-string if [[ $var == *sub_string ]]; then printf \u0026#39;%s\\n\u0026#39; \u0026#34;var ends with sub_string.\u0026#34; fi # Inverse (var does not end with sub_string). if [[ $var != *sub_string ]]; then printf \u0026#39;%s\\n\u0026#39; \u0026#34;var does not end with sub_string.\u0026#34; fi ARRAYS Reverse an array Enabling extdebug allows access to the BASH_ARGV array which stores the current function’s arguments in reverse.\nCAVEAT: Requires shopt -s compat44 in bash 5.0+.\nExample Function:\nreverse_array() { # Usage: reverse_array \u0026#34;array\u0026#34; shopt -s extdebug f()(printf \u0026#39;%s\\n\u0026#39; \u0026#34;${BASH_ARGV[@]}\u0026#34;); f \u0026#34;$@\u0026#34; shopt -u extdebug } Example Usage:\n$ reverse_array 1 2 3 4 5 5 4 3 2 1 $ arr=(red blue green) $ reverse_array \u0026#34;${arr[@]}\u0026#34; green blue red Remove duplicate array elements Create a temporary associative array. When setting associative array values and a duplicate assignment occurs, bash overwrites the key. This allows us to effectively remove array duplicates.\nCAVEAT: Requires bash 4+\nCAVEAT: List order may not stay the same.\nExample Function:\nremove_array_dups() { # Usage: remove_array_dups \u0026#34;array\u0026#34; declare -A tmp_array for i in \u0026#34;$@\u0026#34;; do [[ $i ]] \u0026amp;\u0026amp; IFS=\u0026#34; \u0026#34; tmp_array[\u0026#34;${i:- }\u0026#34;]=1 done printf \u0026#39;%s\\n\u0026#39; \u0026#34;${!tmp_array[@]}\u0026#34; } Example Usage:\n$ remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5 1 2 3 4 5 $ arr=(red red green blue blue) $ remove_array_dups \u0026#34;${arr[@]}\u0026#34; red green blue Random array element Example Function:\nrandom_array_element() { # Usage: random_array_element \u0026#34;array\u0026#34; local arr=(\u0026#34;$@\u0026#34;) printf \u0026#39;%s\\n\u0026#39; \u0026#34;${arr[RANDOM % $#]}\u0026#34; } Example Usage:\n$ array=(red green blue yellow brown) $ random_array_element \u0026#34;${array[@]}\u0026#34; yellow # Multiple arguments can also be passed. $ random_array_element 1 2 3 4 5 6 7 3 Cycle through an array Each time the printf is called, the next array element is printed. When the print hits the last array element it starts from the first element again.\narr=(a b c d) cycle() { printf \u0026#39;%s \u0026#39; \u0026#34;${arr[${i:=0}]}\u0026#34; ((i=i\u0026gt;=${#arr[@]}-1?0:++i)) } Toggle between two values This works the same as above, this is just a different use case.\narr=(true false) cycle() { printf \u0026#39;%s \u0026#39; \u0026#34;${arr[${i:=0}]}\u0026#34; ((i=i\u0026gt;=${#arr[@]}-1?0:++i)) } LOOPS Loop over a range of numbers Alternative to seq.\n# Loop from 0-100 (no variable support). for i in {0..100}; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$i\u0026#34; done Loop over a variable range of numbers Alternative to seq.\n# Loop from 0-VAR. VAR=50 for ((i=0;i\u0026lt;=VAR;i++)); do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$i\u0026#34; done Loop over an array arr=(apples oranges tomatoes) # Just elements. for element in \u0026#34;${arr[@]}\u0026#34;; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$element\u0026#34; done Loop over an array with an index arr=(apples oranges tomatoes) # Elements and index. for i in \u0026#34;${!arr[@]}\u0026#34;; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;${arr[i]}\u0026#34; done # Alternative method. for ((i=0;i\u0026lt;${#arr[@]};i++)); do printf \u0026#39;%s\\n\u0026#39; \u0026#34;${arr[i]}\u0026#34; done Loop over the contents of a file while read -r line; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$line\u0026#34; done \u0026lt; \u0026#34;file\u0026#34; Loop over files and directories Don’t use ls.\n# Greedy example. for file in *; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$file\u0026#34; done # PNG files in dir. for file in ~/Pictures/*.png; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$file\u0026#34; done # Iterate over directories. for dir in ~/Downloads/*/; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$dir\u0026#34; done # Brace Expansion. for file in /path/to/parentdir/{file1,file2,subdir/file3}; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$file\u0026#34; done # Iterate recursively. shopt -s globstar for file in ~/Pictures/**/*; do printf \u0026#39;%s\\n\u0026#39; \u0026#34;$file\u0026#34; done shopt -u globstar FILE HANDLING CAVEAT: bash does not handle binary data properly in versions \u0026lt; 4.4.\nRead a file to a string Alternative to the cat command.\nfile_data=\u0026#34;$(\u0026lt;\u0026#34;file\u0026#34;)\u0026#34; Read a file to an array (by line) Alternative to the cat command.\n# Bash \u0026lt;4 (discarding empty lines). IFS=$\u0026#39;\\n\u0026#39; read -d \u0026#34;\u0026#34; -ra file_data \u0026lt; \u0026#34;file\u0026#34; # Bash \u0026lt;4 (preserving empty lines). while read -r line; do file_data+=(\u0026#34;$line\u0026#34;) done \u0026lt; \u0026#34;file\u0026#34; # Bash 4+ mapfile -t file_data \u0026lt; \u0026#34;file\u0026#34; Get the first N lines of a file Alternative to the head command.\nCAVEAT: Requires bash 4+\nExample Function:\nhead() { # Usage: head \u0026#34;n\u0026#34; \u0026#34;file\u0026#34; mapfile -tn \u0026#34;$1\u0026#34; line \u0026lt; \u0026#34;$2\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${line[@]}\u0026#34; } Example Usage:\n$ head 2 ~/.bashrc # Prompt PS1=\u0026#39;➜ \u0026#39; $ head 1 ~/.bashrc # Prompt Get the last N lines of a file Alternative to the tail command.\nCAVEAT: Requires bash 4+\nExample Function:\ntail() { # Usage: tail \u0026#34;n\u0026#34; \u0026#34;file\u0026#34; mapfile -tn 0 line \u0026lt; \u0026#34;$2\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${line[@]: -$1}\u0026#34; } Example Usage:\n$ tail 2 ~/.bashrc # Enable tmux. # [[ -z \u0026#34;$TMUX\u0026#34; ]] \u0026amp;\u0026amp; exec tmux $ tail 1 ~/.bashrc # [[ -z \u0026#34;$TMUX\u0026#34; ]] \u0026amp;\u0026amp; exec tmux Get the number of lines in a file Alternative to wc -l.\nExample Function (bash 4):\nlines() { # Usage: lines \u0026#34;file\u0026#34; mapfile -tn 0 lines \u0026lt; \u0026#34;$1\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;${#lines[@]}\u0026#34; } Example Function (bash 3):\nThis method uses less memory than the mapfile method and works in bash 3 but it is slower for bigger files.\nlines_loop() { # Usage: lines_loop \u0026#34;file\u0026#34; count=0 while IFS= read -r _; do ((count++)) done \u0026lt; \u0026#34;$1\u0026#34; printf \u0026#39;%s\\n\u0026#39; \u0026#34;$count\u0026#34; } Example Usage:\n$ lines ~/.bashrc 48 $ lines_loop ~/.bashrc 48 Count files or directories in directory This works by passing the output of the glob to the function and then counting the number of arguments.\nExample Function:\ncount() { # Usage: count /path/to/dir/* # count /path/to/dir/*/ printf \u0026#39;%s\\n\u0026#39; \u0026#34;$#\u0026#34; } Example Usage:\n# Count all files in dir. $ count ~/Downloads/* 232 # Count all dirs in dir. $ count ~/Downloads/*/ 45 # Count all jpg files in dir. $ count ~/Pictures/*.jpg 64 Create an empty file Alternative to touch.\n# Shortest. \u0026gt;file # Longer alternatives: :\u0026gt;file echo -n \u0026gt;file printf \u0026#39;\u0026#39; \u0026gt;file Extract lines between two markers Example Function:\nextract() { # Usage: extract file \u0026#34;opening marker\u0026#34; \u0026#34;closing marker\u0026#34; while IFS=$\u0026#39;\\n\u0026#39; read -r line; do [[ $extract \u0026amp;\u0026amp; $line != \u0026#34;$3\u0026#34; ]] \u0026amp;\u0026amp; printf \u0026#39;%s\\n\u0026#39; \u0026#34;$line\u0026#34; [[ $line == \u0026#34;$2\u0026#34; ]] \u0026amp;\u0026amp; extract=1 [[ $line == \u0026#34;$3\u0026#34; ]] \u0026amp;\u0026amp; extract= done \u0026lt; \u0026#34;$1\u0026#34; } Example Usage:\n# Extract code blocks from MarkDown file. $ extract ~/projects/pure-bash/README.md \u0026#39;```sh\u0026#39; \u0026#39;```\u0026#39; # Output here... FILE PATHS Get the directory name of a file path Alternative to the dirname command.\nExample Function:\ndirname() { # Usage: dirname \u0026#34;path\u0026#34; local tmp=${1:-.} [[ $tmp != *[!/]* ]] \u0026amp;\u0026amp; { printf \u0026#39;/\\n\u0026#39; return } tmp=${tmp%%\u0026#34;${tmp##*[!/]}\u0026#34;} [[ $tmp != */* ]] \u0026amp;\u0026amp; { printf \u0026#39;.\\n\u0026#39; return } tmp=${tmp%/*} tmp=${tmp%%\u0026#34;${tmp##*[!/]}\u0026#34;} printf \u0026#39;%s\\n\u0026#39; \u0026#34;${tmp:-/}\u0026#34; } Example Usage:\n$ dirname ~/Pictures/Wallpapers/1.jpg /home/black/Pictures/Wallpapers $ dirname ~/Pictures/Downloads/ /home/black/Pictures Get the base-name of a file path Alternative to the basename command.\nExample Function:\nbasename() { # Usage: basename \u0026#34;path\u0026#34; [\u0026#34;suffix\u0026#34;] local tmp tmp=${1%\u0026#34;${1##*[!/]}\u0026#34;} tmp=${tmp##*/} tmp=${tmp%\u0026#34;${2/\u0026#34;$tmp\u0026#34;}\u0026#34;} printf \u0026#39;%s\\n\u0026#39; \u0026#34;${tmp:-/}\u0026#34; } Example Usage:\n$ basename ~/Pictures/Wallpapers/1.jpg 1.jpg $ basename ~/Pictures/Wallpapers/1.jpg .jpg 1 $ basename ~/Pictures/Downloads/ Downloads VARIABLES Assign and access a variable using a variable $ hello_world=\u0026#34;value\u0026#34; # Create the variable name. $ var=\u0026#34;world\u0026#34; $ ref=\u0026#34;hello_$var\u0026#34; # Print the value of the variable name stored in \u0026#39;hello_$var\u0026#39;. $ printf \u0026#39;%s\\n\u0026#39; \u0026#34;${!ref}\u0026#34; value Alternatively, on bash 4.3+:\n$ hello_world=\u0026#34;value\u0026#34; $ var=\u0026#34;world\u0026#34; # Declare a nameref. $ declare -n ref=hello_$var $ printf \u0026#39;%s\\n\u0026#39; \u0026#34;$ref\u0026#34; value Name a variable based on another variable $ var=\u0026#34;world\u0026#34; $ declare \u0026#34;hello_$var=value\u0026#34; $ printf \u0026#39;%s\\n\u0026#39; \u0026#34;$hello_world\u0026#34; value ESCAPE SEQUENCES Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using tput abstracts the same ANSI sequences as if printed manually. Worse still, tput is not actually portable. There are a number of tput variants each with different commands and syntaxes (try tput setaf 3 on a FreeBSD system). Raw sequences are fine.\nText Colors NOTE: Sequences requiring RGB values only work in True-Color Terminal Emulators.\nSequence What does it do? Value \\e[38;5;\u0026lt;NUM\u0026gt;m Set text foreground color. 0-255 \\e[48;5;\u0026lt;NUM\u0026gt;m Set text background color. 0-255 \\e[38;2;\u0026lt;R\u0026gt;;\u0026lt;G\u0026gt;;\u0026lt;B\u0026gt;m Set text foreground color to RGB color. R, G, B \\e[48;2;\u0026lt;R\u0026gt;;\u0026lt;G\u0026gt;;\u0026lt;B\u0026gt;m Set text background color to RGB color. R, G, B Text Attributes NOTE: Prepend 2 to any code below to turn it\u0026rsquo;s effect off (examples: 21=bold text off, 22=faint text off, 23=italic text off).\nSequence What does it do? \\e[m Reset text formatting and colors. \\e[1m Bold text. \\e[2m Faint text. \\e[3m Italic text. \\e[4m Underline text. \\e[5m Blinking text. \\e[7m Highlighted text. \\e[8m Hidden text. \\e[9m Strike-through text. Cursor Movement Sequence What does it do? Value \\e[\u0026lt;LINE\u0026gt;;\u0026lt;COLUMN\u0026gt;H Move cursor to absolute position. line, column \\e[H Move cursor to home position (0,0). \\e[\u0026lt;NUM\u0026gt;A Move cursor up N lines. num \\e[\u0026lt;NUM\u0026gt;B Move cursor down N lines. num \\e[\u0026lt;NUM\u0026gt;C Move cursor right N columns. num \\e[\u0026lt;NUM\u0026gt;D Move cursor left N columns. num \\e[s Save cursor position. \\e[u Restore cursor position. Erasing Text Sequence What does it do? \\e[K Erase from cursor position to end of line. \\e[1K Erase from cursor position to start of line. \\e[2K Erase the entire current line. \\e[J Erase from the current line to the bottom of the screen. \\e[1J Erase from the current line to the top of the screen. \\e[2J Clear the screen. \\e[2J\\e[H Clear the screen and move cursor to 0,0. PARAMETER EXPANSION Indirection Parameter What does it do? ${!VAR} Access a variable based on the value of VAR. ${!VAR*} Expand to IFS separated list of variable names starting with VAR. ${!VAR@} Expand to IFS separated list of variable names starting with VAR. If double-quoted, each variable name expands to a separate word. Replacement Parameter What does it do? ${VAR#PATTERN} Remove shortest match of pattern from start of string. ${VAR##PATTERN} Remove longest match of pattern from start of string. ${VAR%PATTERN} Remove shortest match of pattern from end of string. ${VAR%%PATTERN} Remove longest match of pattern from end of string. ${VAR/PATTERN/REPLACE} Replace first match with string. ${VAR//PATTERN/REPLACE} Replace all matches with string. ${VAR/PATTERN} Remove first match. ${VAR//PATTERN} Remove all matches. Length Parameter What does it do? ${#VAR} Length of var in characters. ${#ARR[@]} Length of array in elements. Expansion Parameter What does it do? ${VAR:OFFSET} Remove first N chars from variable. ${VAR:OFFSET:LENGTH} Get substring from N character to N character. (${VAR:10:10}: Get sub-string from char 10 to char 20) ${VAR:: OFFSET} Get first N chars from variable. ${VAR:: -OFFSET} Remove last N chars from variable. ${VAR: -OFFSET} Get last N chars from variable. ${VAR:OFFSET:-OFFSET} Cut first N chars and last N chars. Case Modification Parameter What does it do? CAVEAT ${VAR^} Uppercase first character. bash 4+ ${VAR^^} Uppercase all characters. bash 4+ ${VAR,} Lowercase first character. bash 4+ ${VAR,,} Lowercase all characters. bash 4+ ${VAR~} Reverse case of first character. bash 4+ ${VAR~~} Reverse case of all characters. bash 4+ Default Value Parameter What does it do? ${VAR:-STRING} If VAR is empty or unset, use STRING as its value. ${VAR-STRING} If VAR is unset, use STRING as its value. ${VAR:=STRING} If VAR is empty or unset, set the value of VAR to STRING. ${VAR=STRING} If VAR is unset, set the value of VAR to STRING. ${VAR:+STRING} If VAR is not empty, use STRING as its value. ${VAR+STRING} If VAR is set, use STRING as its value. ${VAR:?STRING} Display an error if empty or unset. ${VAR?STRING} Display an error if unset. BRACE EXPANSION Ranges # Syntax: {\u0026lt;START\u0026gt;..\u0026lt;END\u0026gt;} # Print numbers 1-100. echo {1..100} # Print range of floats. echo 1.{1..9} # Print chars a-z. echo {a..z} echo {A..Z} # Nesting. echo {A..Z}{0..9} # Print zero-padded numbers. # CAVEAT: bash 4+ echo {01..100} # Change increment amount. # Syntax: {\u0026lt;START\u0026gt;..\u0026lt;END\u0026gt;..\u0026lt;INCREMENT\u0026gt;} # CAVEAT: bash 4+ echo {1..10..2} # Increment by 2. String Lists echo {apples,oranges,pears,grapes} # Example Usage: # Remove dirs Movies, Music and ISOS from ~/Downloads/. rm -rf ~/Downloads/{Movies,Music,ISOS} CONDITIONAL EXPRESSIONS File Conditionals Expression Value What does it do? -a file If file exists. -b file If file exists and is a block special file. -c file If file exists and is a character special file. -d file If file exists and is a directory. -e file If file exists. -f file If file exists and is a regular file. -g file If file exists and its set-group-id bit is set. -h file If file exists and is a symbolic link. -k file If file exists and its sticky-bit is set -p file If file exists and is a named pipe (FIFO). -r file If file exists and is readable. -s file If file exists and its size is greater than zero. -t fd If file descriptor is open and refers to a terminal. -u file If file exists and its set-user-id bit is set. -w file If file exists and is writable. -x file If file exists and is executable. -G file If file exists and is owned by the effective group ID. -L file If file exists and is a symbolic link. -N file If file exists and has been modified since last read. -O file If file exists and is owned by the effective user ID. -S file If file exists and is a socket. File Comparisons Expression What does it do? file -ef file2 If both files refer to the same inode and device numbers. file -nt file2 If file is newer than file2 (uses modification time) or file exists and file2 does not. file -ot file2 If file is older than file2 (uses modification time) or file2 exists and file does not. Variable Conditionals Expression Value What does it do? -o opt If shell option is enabled. -v var If variable has a value assigned. -R var If variable is a name reference. -z var If the length of string is zero. -n var If the length of string is non-zero. Variable Comparisons Expression What does it do? var = var2 Equal to. var == var2 Equal to (synonym for =). var != var2 Not equal to. var \u0026lt; var2 Less than (in ASCII alphabetical order.) var \u0026gt; var2 Greater than (in ASCII alphabetical order.) ARITHMETIC OPERATORS Assignment Operators What does it do? = Initialize or change the value of a variable. Arithmetic Operators What does it do? + Addition - Subtraction * Multiplication / Division ** Exponentiation % Modulo += Plus-Equal (Increment a variable.) -= Minus-Equal (Decrement a variable.) *= Times-Equal (Multiply a variable.) /= Slash-Equal (Divide a variable.) %= Mod-Equal (Remainder of dividing a variable.) Bitwise Operators What does it do? \u0026lt;\u0026lt; Bitwise Left Shift \u0026lt;\u0026lt;= Left-Shift-Equal \u0026gt;\u0026gt; Bitwise Right Shift \u0026gt;\u0026gt;= Right-Shift-Equal \u0026amp; Bitwise AND \u0026amp;= Bitwise AND-Equal | Bitwise OR |= Bitwise OR-Equal ~ Bitwise NOT ^ Bitwise XOR ^= Bitwise XOR-Equal Logical Operators What does it do? ! NOT \u0026amp;\u0026amp; AND || OR Miscellaneous Operators What does it do? Example , Comma Separator ((a=1,b=2,c=3)) ARITHMETIC Simpler syntax to set variables # Simple math ((var=1+2)) # Decrement/Increment variable ((var++)) ((var--)) ((var+=1)) ((var-=1)) # Using variables ((var=var2*arr[2])) Ternary Tests # Set the value of var to var2 if var2 is greater than var. # var: variable to set. # var2\u0026gt;var: Condition to test. # ?var2: If the test succeeds. # :var: If the test fails. ((var=var2\u0026gt;var?var2:var)) TRAPS Traps allow a script to execute code on various signals. In pxltrm (a pixel art editor written in bash) traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.\nTraps should be added near the start of scripts so any early errors are also caught.\nNOTE: For a full list of signals, see trap -l.\nDo something on script exit # Clear screen on script exit. trap \u0026#39;printf \\\\e[2J\\\\e[H\\\\e[m\u0026#39; EXIT Ignore terminal interrupt (CTRL+C, SIGINT) trap \u0026#39;\u0026#39; INT React to window resize # Call a function on window resize. trap \u0026#39;code_here\u0026#39; SIGWINCH Do something before every command trap \u0026#39;code_here\u0026#39; DEBUG Do something when a shell function or a sourced file finishes executing trap \u0026#39;code_here\u0026#39; RETURN PERFORMANCE Disable Unicode If unicode is not required, it can be disabled for a performance increase. Results may vary however there have been noticeable improvements in neofetch and other programs.\n# Disable unicode. LC_ALL=C LANG=C OBSOLETE SYNTAX Shebang Use #!/usr/bin/env bash instead of #!/bin/bash.\nThe former searches the user\u0026rsquo;s PATH to find the bash binary. The latter assumes it is always installed to /bin/ which can cause issues. NOTE: There are times when one may have a good reason for using #!/bin/bash or another direct path to the binary.\n# Right: #!/usr/bin/env bash # Less right: #!/bin/bash Command Substitution Use $() instead of ` `.\n# Right. var=\u0026#34;$(command)\u0026#34; # Wrong. var=`command` # $() can easily be nested whereas `` cannot. var=\u0026#34;$(command \u0026#34;$(command)\u0026#34;)\u0026#34; Function Declaration Do not use the function keyword, it reduces compatibility with older versions of bash.\n# Right. do_something() { # ... } # Wrong. function do_something() { # ... } INTERNAL VARIABLES Get the location to the bash binary \u0026#34;$BASH\u0026#34; Get the version of the current running bash process # As a string. \u0026#34;$BASH_VERSION\u0026#34; # As an array. \u0026#34;${BASH_VERSINFO[@]}\u0026#34; Open the user\u0026rsquo;s preferred text editor \u0026#34;$EDITOR\u0026#34; \u0026#34;$file\u0026#34; # NOTE: This variable may be empty, set a fallback value. \u0026#34;${EDITOR:-vi}\u0026#34; \u0026#34;$file\u0026#34; Get the name of the current function # Current function. \u0026#34;${FUNCNAME[0]}\u0026#34; # Parent function. \u0026#34;${FUNCNAME[1]}\u0026#34; # So on and so forth. \u0026#34;${FUNCNAME[2]}\u0026#34; \u0026#34;${FUNCNAME[3]}\u0026#34; # All functions including parents. \u0026#34;${FUNCNAME[@]}\u0026#34; Get the host-name of the system \u0026#34;$HOSTNAME\u0026#34; # NOTE: This variable may be empty. # Optionally set a fallback to the hostname command. \u0026#34;${HOSTNAME:-$(hostname)}\u0026#34; Get the architecture of the Operating System \u0026#34;$HOSTTYPE\u0026#34; Get the name of the Operating System / Kernel This can be used to add conditional support for different Operating Systems without needing to call uname.\n\u0026#34;$OSTYPE\u0026#34; Get the current working directory This is an alternative to the pwd built-in.\n\u0026#34;$PWD\u0026#34; Get the number of seconds the script has been running \u0026#34;$SECONDS\u0026#34; Get a pseudorandom integer Each time $RANDOM is used, a different integer between 0 and 32767 is returned. This variable should not be used for anything related to security (this includes encryption keys etc).\n\u0026#34;$RANDOM\u0026#34; INFORMATION ABOUT THE TERMINAL Get the terminal size in lines and columns (from a script) This is handy when writing scripts in pure bash and stty/tput can’t be called.\nExample Function:\nget_term_size() { # Usage: get_term_size # (:;:) is a micro sleep to ensure the variables are # exported immediately. shopt -s checkwinsize; (:;:) printf \u0026#39;%s\\n\u0026#39; \u0026#34;$LINES $COLUMNS\u0026#34; } Example Usage:\n# Output: LINES COLUMNS $ get_term_size 15 55 Get the terminal size in pixels CAVEAT: This does not work in some terminal emulators.\nExample Function:\nget_window_size() { # Usage: get_window_size printf \u0026#39;%b\u0026#39; \u0026#34;${TMUX:+\\\\ePtmux;\\\\e}\\\\e[14t${TMUX:+\\\\e\\\\\\\\}\u0026#34; IFS=\u0026#39;;t\u0026#39; read -d t -t 0.05 -sra term_size printf \u0026#39;%s\\n\u0026#39; \u0026#34;${term_size[1]}x${term_size[2]}\u0026#34; } Example Usage:\n# Output: WIDTHxHEIGHT $ get_window_size 1200x800 # Output (fail): $ get_window_size x Get the current cursor position This is useful when creating a TUI in pure bash.\nExample Function:\nget_cursor_pos() { # Usage: get_cursor_pos IFS=\u0026#39;[;\u0026#39; read -p $\u0026#39;\\e[6n\u0026#39; -d R -rs _ y x _ printf \u0026#39;%s\\n\u0026#39; \u0026#34;$x $y\u0026#34; } Example Usage:\n# Output: X Y $ get_cursor_pos 1 8 CONVERSION Convert a hex color to RGB Example Function:\nhex_to_rgb() { # Usage: hex_to_rgb \u0026#34;#FFFFFF\u0026#34; # hex_to_rgb \u0026#34;000000\u0026#34; : \u0026#34;${1/\\#}\u0026#34; ((r=16#${_:0:2},g=16#${_:2:2},b=16#${_:4:2})) printf \u0026#39;%s\\n\u0026#39; \u0026#34;$r $g $b\u0026#34; } Example Usage:\n$ hex_to_rgb \u0026#34;#FFFFFF\u0026#34; 255 255 255 Convert an RGB color to hex Example Function:\nrgb_to_hex() { # Usage: rgb_to_hex \u0026#34;r\u0026#34; \u0026#34;g\u0026#34; \u0026#34;b\u0026#34; printf \u0026#39;#%02x%02x%02x\\n\u0026#39; \u0026#34;$1\u0026#34; \u0026#34;$2\u0026#34; \u0026#34;$3\u0026#34; } Example Usage:\n$ rgb_to_hex \u0026#34;255\u0026#34; \u0026#34;255\u0026#34; \u0026#34;255\u0026#34; #FFFFFF CODE GOLF Shorter for loop syntax # Tiny C Style. for((;i++\u0026lt;10;)){ echo \u0026#34;$i\u0026#34;;} # Undocumented method. for i in {1..10};{ echo \u0026#34;$i\u0026#34;;} # Expansion. for i in {1..10}; do echo \u0026#34;$i\u0026#34;; done # C Style. for((i=0;i\u0026lt;=10;i++)); do echo \u0026#34;$i\u0026#34;; done Shorter infinite loops # Normal method while :; do echo hi; done # Shorter for((;;)){ echo hi;} Shorter function declaration # Normal method f(){ echo hi;} # Using a subshell f()(echo hi) # Using arithmetic # This can be used to assign integer values. # Example: f a=1 # f a++ f()(($1)) # Using tests, loops etc. # NOTE: ‘while’, ‘until’, ‘case’, ‘(())’, ‘[[]]’ can also be used. f()if true; then echo \u0026#34;$1\u0026#34;; fi f()for i in \u0026#34;$@\u0026#34;; do echo \u0026#34;$i\u0026#34;; done Shorter if syntax # One line # Note: The 3rd statement may run when the 1st is true [[ $var == hello ]] \u0026amp;\u0026amp; echo hi || echo bye [[ $var == hello ]] \u0026amp;\u0026amp; { echo hi; echo there; } || echo bye # Multi line (no else, single statement) # Note: The exit status may not be the same as with an if statement [[ $var == hello ]] \u0026amp;\u0026amp; echo hi # Multi line (no else) [[ $var == hello ]] \u0026amp;\u0026amp; { echo hi # ... } Simpler case statement to set variable The : built-in can be used to avoid repeating variable= in a case statement. The $_ variable stores the last argument of the last command. : always succeeds so it can be used to store the variable value.\n# Modified snippet from Neofetch. case \u0026#34;$OSTYPE\u0026#34; in \u0026#34;darwin\u0026#34;*) : \u0026#34;MacOS\u0026#34; ;; \u0026#34;linux\u0026#34;*) : \u0026#34;Linux\u0026#34; ;; *\u0026#34;bsd\u0026#34;* | \u0026#34;dragonfly\u0026#34; | \u0026#34;bitrig\u0026#34;) : \u0026#34;BSD\u0026#34; ;; \u0026#34;cygwin\u0026#34; | \u0026#34;msys\u0026#34; | \u0026#34;win32\u0026#34;) : \u0026#34;Windows\u0026#34; ;; *) printf \u0026#39;%s\\n\u0026#39; \u0026#34;Unknown OS detected, aborting...\u0026#34; \u0026gt;\u0026amp;2 exit 1 ;; esac # Finally, set the variable. os=\u0026#34;$_\u0026#34; OTHER Use read as an alternative to the sleep command Surprisingly, sleep is an external command and not a bash built-in.\nCAVEAT: Requires bash 4+\nExample Function:\nread_sleep() { # Usage: read_sleep 1 # read_sleep 0.2 read -rt \u0026#34;$1\u0026#34; \u0026lt;\u0026gt; \u0026lt;(:) || : } Example Usage:\nread_sleep 1 read_sleep 0.1 read_sleep 30 For performance-critical situations, where it is not economic to open and close an excessive number of file descriptors, the allocation of a file descriptor may be done only once for all invocations of read:\n(See the generic original implementation at https://blog.dhampir.no/content/sleeping-without-a-subprocess-in-bash-and-how-to-sleep-forever)\nexec {sleep_fd}\u0026lt;\u0026gt; \u0026lt;(:) while some_quick_test; do # equivalent of sleep 0.001 read -t 0.001 -u $sleep_fd done Check if a program is in the user\u0026rsquo;s PATH # There are 3 ways to do this and either one can be used. type -p executable_name \u0026amp;\u0026gt;/dev/null hash executable_name \u0026amp;\u0026gt;/dev/null command -v executable_name \u0026amp;\u0026gt;/dev/null # As a test. if type -p executable_name \u0026amp;\u0026gt;/dev/null; then # Program is in PATH. fi # Inverse. if ! type -p executable_name \u0026amp;\u0026gt;/dev/null; then # Program is not in PATH. fi # Example (Exit early if program is not installed). if ! type -p convert \u0026amp;\u0026gt;/dev/null; then printf \u0026#39;%s\\n\u0026#39; \u0026#34;error: convert is not installed, exiting...\u0026#34; exit 1 fi Get the current date using strftime Bash’s printf has a built-in method of getting the date which can be used in place of the date command.\nCAVEAT: Requires bash 4+\nExample Function:\ndate() { # Usage: date \u0026#34;format\u0026#34; # See: \u0026#39;man strftime\u0026#39; for format. printf \u0026#34;%($1)T\\\\n\u0026#34; \u0026#34;-1\u0026#34; } Example Usage:\n# Using above function. $ date \u0026#34;%a %d %b - %l:%M %p\u0026#34; Fri 15 Jun - 10:00 AM # Using printf directly. $ printf \u0026#39;%(%a %d %b - %l:%M %p)T\\n\u0026#39; \u0026#34;-1\u0026#34; Fri 15 Jun - 10:00 AM # Assigning a variable using printf. $ printf -v date \u0026#39;%(%a %d %b - %l:%M %p)T\\n\u0026#39; \u0026#39;-1\u0026#39; $ printf \u0026#39;%s\\n\u0026#39; \u0026#34;$date\u0026#34; Fri 15 Jun - 10:00 AM Get the username of the current user CAVEAT: Requires bash 4.4+\n$ : \\\\u # Expand the parameter as if it were a prompt string. $ printf \u0026#39;%s\\n\u0026#39; \u0026#34;${_@P}\u0026#34; black Generate a UUID V4 CAVEAT: The generated value is not cryptographically secure.\nExample Function:\nuuid() { # Usage: uuid C=\u0026#34;89ab\u0026#34; for ((N=0;N\u0026lt;16;++N)); do B=\u0026#34;$((RANDOM%256))\u0026#34; case \u0026#34;$N\u0026#34; in 6) printf \u0026#39;4%x\u0026#39; \u0026#34;$((B%16))\u0026#34; ;; 8) printf \u0026#39;%c%x\u0026#39; \u0026#34;${C:$RANDOM%${#C}:1}\u0026#34; \u0026#34;$((B%16))\u0026#34; ;; 3|5|7|9) printf \u0026#39;%02x-\u0026#39; \u0026#34;$B\u0026#34; ;; *) printf \u0026#39;%02x\u0026#39; \u0026#34;$B\u0026#34; ;; esac done printf \u0026#39;\\n\u0026#39; } Example Usage:\n$ uuid d5b6c731-1310-4c24-9fe3-55d556d44374 Progress bars This is a simple way of drawing progress bars without needing a for loop in the function itself.\nExample Function:\nbar() { # Usage: bar 1 10 # ^----- Elapsed Percentage (0-100). # ^-- Total length in chars. ((elapsed=$1*$2/100)) # Create the bar with spaces. printf -v prog \u0026#34;%${elapsed}s\u0026#34; printf -v total \u0026#34;%$(($2-elapsed))s\u0026#34; printf \u0026#39;%s\\r\u0026#39; \u0026#34;[${prog// /-}${total}]\u0026#34; } Example Usage:\nfor ((i=0;i\u0026lt;=100;i++)); do # Pure bash micro sleeps (for the example). (:;:) \u0026amp;\u0026amp; (:;:) \u0026amp;\u0026amp; (:;:) \u0026amp;\u0026amp; (:;:) \u0026amp;\u0026amp; (:;:) # Print the bar. bar \u0026#34;$i\u0026#34; \u0026#34;10\u0026#34; done printf \u0026#39;\\n\u0026#39; Get the list of functions in a script get_functions() { # Usage: get_functions IFS=$\u0026#39;\\n\u0026#39; read -d \u0026#34;\u0026#34; -ra functions \u0026lt; \u0026lt;(declare -F) printf \u0026#39;%s\\n\u0026#39; \u0026#34;${functions[@]//declare -f }\u0026#34; } Bypass shell aliases # alias ls # command # shellcheck disable=SC1001 \\ls Bypass shell functions # function ls # command command ls Run a command in the background This will run the given command and keep it running, even after the terminal or SSH connection is terminated. All output is ignored.\nbkr() { (nohup \u0026#34;$@\u0026#34; \u0026amp;\u0026gt;/dev/null \u0026amp;) } bkr ./some_script.sh # some_script.sh is now running in the background Capture the return value of a function without command substitution CAVEAT: Requires bash 4+\nThis uses local namerefs to avoid using var=$(some_func) style command substitution for function output capture.\nto_upper() { local -n ptr=${1} ptr=${ptr^^} } foo=\u0026#34;bar\u0026#34; to_upper foo printf \u0026#34;%s\\n\u0026#34; \u0026#34;${foo}\u0026#34; # BAR ","permalink":"https://hauptling12.github.io/vimmart/posts/ultimate-bash-cheatcheat/","tags":["bash","shell","scripting"],"title":"Ultimate Bash cheatsheet"},{"categories":["Linux"],"contents":"If you are new to Linux, or have used it for a few months, then you must have heard or read statements such as “In Linux, everything is a File”.\nThat is in fact true although it is just a generalization concept, in Unix and its derivatives such as Linux, everything is considered as a file. If something is not a file, then it must be running as a process on the system.\nTo understand this, take for example the amount of space on your root / directory is always consumed by different types of Linux files. When you create a file or transfer a file to your system, it occupies some space on the physical disk and it is considered to be in a specific format (file type).\nAnd also the Linux system does not differentiate between files and directories, but directories do one important job, that is store other files in groups in a hierarchy for easy location. All your hardware components are represented as files and the system communicates with them using these files.\nThe idea is an important description of a great property of Linux, where input/output resources such as your documents, directories (folders in Mac OS X and Windows), keyboard, monitor, hard-drives, removable media, printers, modems, virtual terminals and also inter-process and network communication are streams of bytes defined by file system space.\nA notable advantage of everything being a file is that the same set of Linux tools, utilities and APIs can be used on the above input/output resources.\nAlthough everything in Linux is a file, there are certain special files that are more than just a file for example sockets and named pipes.\nWhat are the different types of files in Linux? In Linux there are basically three types of files:\nOrdinary/Regular files Special files Directories Ordinary/Regular Files These are files data contain text, data or program instructions and they are the most common type of files you can expect to find on a Linux system and they include:\nReadable files Binary files Image files Compressed files and so on. Special Files Special files include the following:\nBlock files : These are device files that provide buffered access to system hardware components. They provide a method of communication with device drivers through the file system.\nOne important aspect about block files is that they can transfer a large block of data and information at a given time.\nListing block files sockets in a directory:\n# ls -l /dev | grep \u0026#34;^b\u0026#34; Sample Output brw-rw---- 1 root disk 7, 0 May 18 10:26 loop0 brw-rw---- 1 root disk 7, 1 May 18 10:26 loop1 brw-rw---- 1 root disk 7, 2 May 18 10:26 loop2 brw-rw---- 1 root disk 7, 3 May 18 10:26 loop3 brw-rw---- 1 root disk 7, 4 May 18 10:26 loop4 brw-rw---- 1 root disk 7, 5 May 18 10:26 loop5 brw-rw---- 1 root disk 7, 6 May 18 10:26 loop6 brw-rw---- 1 root disk 7, 7 May 18 10:26 loop7 brw-rw---- 1 root disk 1, 0 May 18 10:26 ram0 brw-rw---- 1 root disk 1, 1 May 18 10:26 ram1 brw-rw---- 1 root disk 1, 10 May 18 10:26 ram10 brw-rw---- 1 root disk 1, 11 May 18 10:26 ram11 brw-rw---- 1 root disk 1, 12 May 18 10:26 ram12 brw-rw---- 1 root disk 1, 13 May 18 10:26 ram13 brw-rw---- 1 root disk 1, 14 May 18 10:26 ram14 brw-rw---- 1 root disk 1, 15 May 18 10:26 ram15 brw-rw---- 1 root disk 1, 2 May 18 10:26 ram2 brw-rw---- 1 root disk 1, 3 May 18 10:26 ram3 brw-rw---- 1 root disk 1, 4 May 18 10:26 ram4 brw-rw---- 1 root disk 1, 5 May 18 10:26 ram5 ... Character files : These are also device files that provide unbuffered serial access to system hardware components. They work by providing a way of communication with devices by transferring data one character at a time.\nListing character files sockets in a directory:\n# ls -l /dev | grep \u0026#34;^c\u0026#34; Sample Output crw------- 1 root root 10, 235 May 18 15:54 autofs crw------- 1 root root 10, 234 May 18 15:54 btrfs-control crw------- 1 root root 5, 1 May 18 10:26 console crw------- 1 root root 10, 60 May 18 10:26 cpu_dma_latency crw------- 1 root root 10, 203 May 18 15:54 cuse crw------- 1 root root 10, 61 May 18 10:26 ecryptfs crw-rw---- 1 root video 29, 0 May 18 10:26 fb0 crw-rw-rw- 1 root root 1, 7 May 18 10:26 full crw-rw-rw- 1 root root 10, 229 May 18 10:26 fuse crw------- 1 root root 251, 0 May 18 10:27 hidraw0 crw------- 1 root root 10, 228 May 18 10:26 hpet crw-r--r-- 1 root root 1, 11 May 18 10:26 kmsg crw-rw----+ 1 root root 10, 232 May 18 10:26 kvm crw------- 1 root root 10, 237 May 18 10:26 loop-control crw------- 1 root root 10, 227 May 18 10:26 mcelog crw------- 1 root root 249, 0 May 18 10:27 media0 crw------- 1 root root 250, 0 May 18 10:26 mei0 crw-r----- 1 root kmem 1, 1 May 18 10:26 mem crw------- 1 root root 10, 57 May 18 10:26 memory_bandwidth crw------- 1 root root 10, 59 May 18 10:26 network_latency crw------- 1 root root 10, 58 May 18 10:26 network_throughput crw-rw-rw- 1 root root 1, 3 May 18 10:26 null crw-r----- 1 root kmem 1, 4 May 18 10:26 port crw------- 1 root root 108, 0 May 18 10:26 ppp crw------- 1 root root 10, 1 May 18 10:26 psaux crw-rw-rw- 1 root tty 5, 2 May 18 17:40 ptmx crw-rw-rw- 1 root root 1, 8 May 18 10:26 random Symbolic link files : A symbolic link is a reference to another file on the system. Therefore, symbolic link files are files that point to other files, and they can either be directories or regular files.\nListing symbolic link sockets in a directory:\n# ls -l /dev/ | grep \u0026#34;^l\u0026#34; Sample Output lrwxrwxrwx 1 root root 3 May 18 10:26 cdrom -\u0026gt; sr0 lrwxrwxrwx 1 root root 11 May 18 15:54 core -\u0026gt; /proc/kcore lrwxrwxrwx 1 root root 13 May 18 15:54 fd -\u0026gt; /proc/self/fd lrwxrwxrwx 1 root root 4 May 18 10:26 rtc -\u0026gt; rtc0 lrwxrwxrwx 1 root root 8 May 18 10:26 shm -\u0026gt; /run/shm lrwxrwxrwx 1 root root 15 May 18 15:54 stderr -\u0026gt; /proc/self/fd/2 lrwxrwxrwx 1 root root 15 May 18 15:54 stdin -\u0026gt; /proc/self/fd/0 lrwxrwxrwx 1 root root 15 May 18 15:54 stdout -\u0026gt; /proc/self/fd/1 You can make symbolic links using the ln utility in Linux as in the example below.\n# touch file1.txt # ln -s file1.txt /home/hauptling/file1.txt [create symbolic link] # ls -l /home/hauptling/ | grep \u0026#34;^l\u0026#34; [List symbolic links] In the above example, I created a file called file1.txt in /tmp directory, then created the symbolic link, /home/hauptling/file1.txt to point to /tmp/file1.txt.\nPipes or Named pipes : These are files that allow inter-process communication by connecting the output of one process to the input of another.\nA named pipe is actually a file that is used by two process to communicate with each and it acts as a Linux pipe.\nListing pipes sockets in a directory:\n# ls -l | grep \u0026#34;^p\u0026#34; Sample Output prw-rw-r-- 1 hauptling hauptling 0 May 18 17:47 pipe1 prw-rw-r-- 1 hauptling hauptling 0 May 18 17:47 pipe2 prw-rw-r-- 1 hauptling hauptling 0 May 18 17:47 pipe3 prw-rw-r-- 1 hauptling hauptling 0 May 18 17:47 pipe4 prw-rw-r-- 1 hauptling hauptling 0 May 18 17:47 pipe5 You can use the mkfifo utility to create a named pipe in Linux as follows.\n# mkfifo pipe1 # echo \u0026#34;This is named pipe1\u0026#34; \u0026gt; pipe1 In the above example, I created a named pipe called pipe1, then I passed some data to it using the echo command, after that the shell became un-interactive while processing the input.\nThen I opened another shell and run the another command to print out what was passed to pipe.\n# while read line ;do echo \u0026#34;This was passed-\u0026#39;$line\u0026#39; \u0026#34;; done\u0026lt;pipe1 Socket files : These are files that provide a means of inter-process communication, but they can transfer data and information between process running on different environments.\nThis means that sockets provide data and information transfer between process running on different machines on a network.\nAn example to show the work of sockets would be a web browser making a connection to a web server.\n# ls -l /dev/ | grep \u0026#34;^s\u0026#34; Sample Output srw-rw-rw- 1 root root 0 May 18 10:26 log This is an example of a socket create in C by using the socket() system call.\nint socket_desc= socket(AF_INET, SOCK_STREAM, 0 ); In the above:\nAF_INET is the address family(IPv4) SOCK_STREAM is the type (connection is TCP protocol oriented) 0 is the protocol(IP Protocol) To refer to the socket file, use the socket_desc, which is the same as the file descriptor, and use read() and write() system calls to read and write from the socket respectively.\nDirectories These are special files that store both ordinary and other special files and they are organized on the Linux file system in a hierarchy starting from the root (/) directory.\nListing sockets in a directory:\n# ls -l / | grep \u0026#34;^d\u0026#34; Sample Output drwxr-xr-x 2 root root 4096 May 5 15:49 bin drwxr-xr-x 4 root root 4096 May 5 15:58 boot drwxr-xr-x 2 root root 4096 Apr 11 2015 cdrom drwxr-xr-x 17 root root 4400 May 18 10:27 dev drwxr-xr-x 168 root root 12288 May 18 10:28 etc drwxr-xr-x 3 root root 4096 Apr 11 2015 home drwxr-xr-x 25 root root 4096 May 5 15:44 lib drwxr-xr-x 2 root root 4096 May 5 15:44 lib64 drwx------ 2 root root 16384 Apr 11 2015 lost+found drwxr-xr-x 3 root root 4096 Apr 10 2015 media drwxr-xr-x 3 root root 4096 Feb 23 17:54 mnt drwxr-xr-x 16 root root 4096 Apr 30 16:01 opt dr-xr-xr-x 223 root root 0 May 18 15:54 proc drwx------ 19 root root 4096 Apr 9 11:12 root drwxr-xr-x 27 root root 920 May 18 10:54 run drwxr-xr-x 2 root root 12288 May 5 15:57 sbin drwxr-xr-x 2 root root 4096 Dec 1 2014 srv dr-xr-xr-x 13 root root 0 May 18 15:54 sys drwxrwxrwt 13 root root 4096 May 18 17:55 tmp drwxr-xr-x 11 root root 4096 Mar 31 16:00 usr drwxr-xr-x 12 root root 4096 Nov 12 2015 var You can make a directory using the mkdir command.\n# mkdir -m 1666 vimmart.com # mkdir -m 1666 stackoverflow.com Summary You should now be having a clear understanding of why everything in Linux is a file and the different types of files that can exit on your Linux system.\n","permalink":"https://hauptling12.github.io/vimmart/posts/explanation-of-everything-is-a-file-and-types-of-files-in-linux/","tags":["Files"],"title":"Explanation of Everything Is a File and Types of Files in Linux"},{"categories":["Linux","Windows","Programming"],"contents":"fdisk stands (for “fixed disk or format disk“) is an most commonly used command-line based disk manipulation utility for a Linux/Unix systems. With the help of fdisk command you can view, create, resize, delete, change, copy and move partitions on a hard drive using its own user friendly text based menu driven interface.\nThis tool is very useful in terms of creating space for new partitions, organising space for new drives, re-organising an old drives and copying or moving data to new disks. It allows you to create a maximum of four new primary partition and number of logical (extended) partitions, based on size of the hard disk you have in your system.\nThis article explains 10 basic fdisk commands to manage a partition table in Linux based systems. You must be root user to run fdisk command, otherwise you will get a “command not found” error.\n1 View all Disk Partitions in Linux The following basic command list all existing disk partition on your system. The ‘-l‘ argument stand for (listing all partitions) is used with fdisk command to view all available partitions on Linux. The partitions are displayed by their device’s names. For example: /dev/sda, /dev/sdb or /dev/sdc.\n[root@vimmart.com ~]# fdisk -l Disk /dev/sda: 637.8 GB, 637802643456 bytes 255 heads, 63 sectors/track, 77541 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Device Boot Start End Blocks Id System /dev/sda1 * 1 13 104391 83 Linux /dev/sda2 14 2624 20972857+ 83 Linux /dev/sda3 2625 4582 15727635 83 Linux /dev/sda4 4583 77541 586043167+ 5 Extended /dev/sda7 7193 7845 5245191 83 Linux /dev/sda8 7846 8367 4192933+ 82 Linux swap / Solaris /dev/sda9 8368 77541 555640123+ 8e Linux LVM 2. View Specific Disk Partition in Linux To view all partitions of specific hard disk use the option ‘-l‘ with device name. For example, the following command will display all disk partitions of device /dev/sda. If you’ve different device names, simple write device name as /dev/sdb or /dev/sdc.\n[root@vimmart.com ~]# fdisk -l /dev/sda Disk /dev/sda: 637.8 GB, 637802643456 bytes 255 heads, 63 sectors/track, 77541 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Device Boot Start End Blocks Id System /dev/sda1 * 1 13 104391 83 Linux /dev/sda2 14 2624 20972857+ 83 Linux /dev/sda3 2625 4582 15727635 83 Linux /dev/sda4 4583 77541 586043167+ 5 Extended /dev/sda7 7193 7845 5245191 83 Linux /dev/sda8 7846 8367 4192933+ 82 Linux swap / Solaris /dev/sda9 8368 77541 555640123+ 8e Linux LVM 3. Check all Available fdisk Commands If you would like to view all commands which are available for fdisk. Simply use the following command by mentioning the hard disk name such as /dev/sda as shown below. The following command will give you output similar to below.\n[root@tvimmart ~]# fdisk /dev/sda WARNING: DOS-compatible mode is deprecated. It\u0026#39;s strongly recommended to switch off the mode (command \u0026#39;c\u0026#39;) and change display units to sectors (command \u0026#39;u\u0026#39;). Command (m for help): Type ‘m‘ to see the list of all available commands of fdisk which can be operated on /dev/sda hard disk. After, I enter ‘m‘ on the screen, you will see the all available options for fdisk that you can be used on the /dev/sda device.\n[root@vimmart ~]# fdisk /dev/sda WARNING: DOS-compatible mode is deprecated. It\u0026#39;s strongly recommended to switch off the mode (command \u0026#39;c\u0026#39;) and change display units to sectors (command \u0026#39;u\u0026#39;). Command (m for help): m Command action a toggle a bootable flag b edit bsd disklabel c toggle the dos compatibility flag d delete a partition l list known partition types m print this menu n add a new partition o create a new empty DOS partition table p print the partition table q quit without saving changes s create a new empty Sun disklabel t change a partition\u0026#39;s system id u change display/entry units v verify the partition table w write table to disk and exit x extra functionality (experts only) Command (m for help): 4. Print all Partition Table in Linux To print all partition table of hard disk, you must be on command mode of specific hard disk say /dev/sda.\nCommand (m for help): p Disk /dev/sda: 637.8 GB, 637802643456 bytes 255 heads, 63 sectors/track, 77541 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Device Boot Start End Blocks Id System /dev/sda1 * 1 13 104391 83 Linux /dev/sda2 14 2624 20972857+ 83 Linux /dev/sda3 2625 4582 15727635 83 Linux /dev/sda4 4583 77541 586043167+ 5 Extended /dev/sda5 4583 5887 10482381 83 Linux /dev/sda6 5888 7192 10482381 83 Linux /dev/sda7 7193 7845 5245191 83 Linux /dev/sda8 7846 8367 4192933+ 82 Linux swap / Solaris /dev/sda9 8368 77541 555640123+ 8e Linux LVM Command (m for help): 5. How to Delete a Partition in Linux If you would like to delete a specific partition (i.e /dev/sda9) from the specific hard disk such as /dev/sda. You must be in fdisk command mode to do this.\n[root@vimmart ~]# fdisk /dev/sda Next, enter ‘d‘ to delete any given partition name from the system. As I enter ‘d‘, it will prompt me to enter partition number that I want to delete from /dev/sda hard disk. Suppose I enter number ‘4‘ here, then it will delete partition number ‘4‘ (i.e. /dev/sda4) disk and shows free space in partition table. Enter ‘w‘ to write table to disk and exit after making new alterations to partition table. The new changes would only take place after next reboot of system. This can be easily understood from the below output.\n[root@vimmart ~]# fdisk /dev/sda WARNING: DOS-compatible mode is deprecated. It\u0026#39;s strongly recommended to switch off the mode (command \u0026#39;c\u0026#39;) and change display units to sectors (command \u0026#39;u\u0026#39;). Command (m for help): d Partition number (1-4): 4 Command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: Device or resource busy. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) Syncing disks. You have new mail in /var/spool/mail/root Warning : Be careful, while performing this step, because using option ‘d‘ will completely delete partition from system and may lost all data in partition.\n6. How to Create a New Partition in Linux If you’ve free space left on one of your device say /dev/sda and would like to create a new partition under it. Then you must be in fdisk command mode of /dev/sda. Type the following command to enter into command mode of specific hard disk.\n[root@vimmart ~]# fdisk /dev/sda After entering in command mode, now press “n” command to create a new partition under /dev/sda with specific size. This can be demonstrated with the help of following given output.\n[root@vimmart ~]# fdisk /dev/sda WARNING: DOS-compatible mode is deprecated. It\u0026#39;s strongly recommended to switch off the mode (command \u0026#39;c\u0026#39;) and change display units to sectors (command \u0026#39;u\u0026#39;). Command (m for help): n Command action e extended p primary partition (1-4) e While creating a new partition, it will ask you two options ‘extended‘ or ‘primary‘ partition creation. Press ‘e‘ for extended partition and ‘p‘ for primary partition. Then it will ask you to enter following two inputs.\nFirst cylinder number of the partition to be create. Last cylinder number of the partition to be created (Last cylinder, +cylinders or +size). You can enter the size of cylinder by adding “+5000M” in last cylinder. Here, ‘+‘ means addition and 5000M means size of new partition (i.e 5000MB). Please keep in mind that after creating a new partition, you should run ‘w‘ command to alter and save new changes to partition table and finally reboot your system to verify newly created partition.\nCommand (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: Device or resource busy. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) Syncing disks. 7. How to Format a Partition in Linux After the new partition is created, don’t skip to format the newly created partition using ‘mkfs‘ command. Type the following command in the terminal to format a partition. Here /dev/sda4 is my newly created partition.\n[root@vimmart ~]# mkfs.ext4 /dev/sda4 8. How to Check Size of a Partition in Linux After formatting new partition, check the size of that partition using flag ‘s‘ (displays size in blocks) with fdisk command. This way you can check size of any specific device.\n[root@vimmart ~]# fdisk -s /dev/sda2 5194304 9. How to Fix Partition Table Order If you’ve deleted a logical partition and again recreated it, you might notice ‘partition out of order‘ problem or error message like ‘Partition table entries are not in disk order‘.\nFor example, when three logical partitions such as (sda4, sda5 and sda6) are deleted, and new partition created, you might expect the new partition name would be sda4. But, the system would create it as sda5. This happens because of, after the partition are deleted, sda7 partition had been moved as sda4 and free space shift to the end.\nTo fix such partition order problems, and assign sda4 to the newly created partition, issue the ‘x‘ to enter an extra functionality section and then enter ‘f‘ expert command to fix the order of partition table as shown below.\n[root@vimmart ~]# fdisk /dev/sda WARNING: DOS-compatible mode is deprecated. It\u0026#39;s strongly recommended to switch off the mode (command \u0026#39;c\u0026#39;) and change display units to sectors (command \u0026#39;u\u0026#39;). Command (m for help): x Expert command (m for help): f Done. Expert command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: Device or resource busy. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) Syncing disks. After, running ‘f‘ command, don’t forget to run ‘w‘ command to save and exit from fdisk command mode. Once it fixed partition table order, you will no longer get error messages.\n10. How to Disable Boot Flag (*) of a Partition By default, fdisk command shows the boot flag (i.e. ‘*‘) symbol on each partition. If you want to enable or disable boot flag on a specific partition, do the following steps.\n[root@vimmart ~]# fdisk /dev/sda Press ‘p‘ command to view the current partition table, you see there is a boot flag (asterisk (*) symbol in orange color) on /dev/sda1 disk as shown below.\n[root@vimmart ~]# fdisk /dev/sda WARNING: DOS-compatible mode is deprecated. It\u0026#39;s strongly recommended to switch off the mode (command \u0026#39;c\u0026#39;) and change display units to sectors (command \u0026#39;u\u0026#39;). Command (m for help): p Disk /dev/sda: 637.8 GB, 637802643456 bytes 255 heads, 63 sectors/track, 77541 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Device Boot Start End Blocks Id System /dev/sda1 * 1 13 104391 83 Linux /dev/sda2 14 2624 20972857+ 83 Linux /dev/sda3 2625 4582 15727635 83 Linux /dev/sda4 4583 77541 586043167+ 5 Extended /dev/sda5 4583 5887 10482381 83 Linux /dev/sda6 5888 7192 10482381 83 Linux /dev/sda7 7193 7845 5245191 83 Linux /dev/sda8 7846 8367 4192933+ 82 Linux swap / Solaris /dev/sda9 8368 77541 555640123+ 8e Linux LVM Next enter command ‘a‘ to disable boot flag, then enter partition number ‘1‘ as (i.e. /dev/sda1) in my case. This will disable boot flag on the partition /dev/sda1. This will remove the asterisk (*) flag.\nCommand (m for help): a Partition number (1-9): 1 Command (m for help): p Disk /dev/sda: 637.8 GB, 637802643456 bytes 255 heads, 63 sectors/track, 77541 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Device Boot Start End Blocks Id System /dev/sda1 1 13 104391 83 Linux /dev/sda2 14 2624 20972857+ 83 Linux /dev/sda3 2625 4582 15727635 83 Linux /dev/sda4 4583 77541 586043167+ 5 Extended /dev/sda5 4583 5887 10482381 83 Linux /dev/sda6 5888 7192 10482381 83 Linux /dev/sda7 7193 7845 5245191 83 Linux /dev/sda8 7846 8367 4192933+ 82 Linux swap / Solaris /dev/sda9 8368 77541 555640123+ 8e Linux LVM Command (m for help): I’ve tried my best to include almost all basic commands of fdisk commands, but still fdisk contains a variety of other expert commands you can use them by entering ‘x‘. For more detailed information, check out ‘man fdisk‘ command from the terminal. If I’ve missed any important command, please do share with me via comment section.\n","permalink":"https://hauptling12.github.io/vimmart/posts/fdisk-commands-to-manage-linux-disk-partitions/","tags":["cli","Partitions"],"title":"Fdisk Commands to Manage Linux Disk Partitions"},{"categories":["linux"],"contents":"You must have probably heard that Everything is a File in Linux in UNIX and UNIX derivatives such as Linux. If not a file, then it must be a running process.\nThere are three broad categories of files in Linux.\nGeneral Files – These are ordinary files made up of binary or ASCII data. These are regular files such as documents, images, audio and video files, etc. Directory Files – In Linux, directories are also categorized as files since they also serve as storage space for other files and folders. Device Files – These are special files that provide an interface to device drivers which enable the usability of hardware devices on the system such as mice, keyboards, USB devices, hard drives, etc. These are found in the /dev directory. Linux Directory Structure Diagram A standard Linux distribution follows the directory structure as provided below with Diagram and explanation.\nEach of the above directories (which is a file, in the first place) contains important information, required for booting to device drivers, configuration files, etc. Describing briefly the purpose of each directory, we are starting hierarchically.\n/ Directory The root directory, denoted by a single forward slash /, is the uppermost directory in the Linux directory structure. It contains all directories, sub-directories, and files on your Linux system. It’s from the root directory where the Linux directory hierarchy starts.\nNOTE: The root directory (/) should not be confused with the root home directory (/root).\n/boot Directory This is one of the most vital directories in a Linux system. As the name infers, the boot directory contains Linux boot files such as the bootloader, the kernel, and its associated files. Files such as vmlinuz represent the compressed image of the Linux kernel.\nThe /etc directory contains system configuration files for all the services, scripts, and third-party applications that are installed. This directory is considered the nerve center of the Linux system.\n/etc Directory /home Directory The /home directory is a directory that contains a user’s personal folders and files. On a graphical Linux system, the home directory, by default, contains folders such as Desktop, Documents, Downloads, Pictures, Videos, and Public.\nIn addition, the /home directory contains personal configuration files which are prefixed with a dot (.). These are hidden files that contain user-specific settings for the login shell session.\n/root Directory The /root directory is the home directory for the root user, which is also referred to as the root user’s home directory (and not as the root (/) directory).\nThe root account also referred to as the superuser, administrative user, system administrator or just the root user has all the access to commands and system files in Linux.\n/opt Directory The /opt directory is a directory that is reserved for add-on packages and third-party software applications that are not included by default in the system’s official repositories.\nFor example, when you install applications such as Skype, Discord, Spotify, and Java, to mention a few, they get stored in the /opt directory.\n/dev Directory The /dev directory contains device files or special files for devices that are attached to the system such as the hard drive, keyboard, and mouse. As mentioned, these are not regular that a user can read and write to.\nThese are abstractions of standard devices that applications on your system interact with through input and output system calls.\n/var Directory The /var directory stores system-generated variable files, which include log files, caches, and spool files just to mention a few.\n/bin Directory The /bin directory contains user binaries, executable programs, and common system commands that are used by all users in the system. These include ls, pwd, cat, mkdir, cd, cp, du, df, tar, rpm, wc, etc.\n/sbin Directory The /sbin directory contains executable files, utilities, and system commands that are reserved for the root user or a user with root privileges. Such commands include halt, reboot, mkfs, fsck, fdisk, halt, iptables, ifconfig, ip, swapon, etc.\n/usr Directory The /usr directory ranks as one of the most important directories due to the enormous amount of data it holds. The directory contains system-wide read-only files. These include libraries, user binaries and their documentation, programs, and system utilities.\n/proc Directory The /proc directory is somewhat of a strange directory. It is a virtual or pseudo filesystem that contains vital information about running processes. It is considered the control and information center for the Linux kernel.\nThe filesystem is created on the fly upon system startup and is destroyed once the system is powered off.\n/mnt Directory The /mnt directory along with its subdirectories is a directory intended to be used as a temporary mount point for mounting storage devices such as Hard disk drives, USB drives, and CDROMs.\n/sys Directory The /sys is a virtual file system that contains a set of virtual files that provide an interface to the Linux kernel.\n/media Directory The /media directory is a directory where the system mounts removable media such as USB drives.\n/run Directory The /run directory is a temporary filesystem that contains volatile runtime data that shows the system has since it was booted. Files under the /run directory must be deleted (removed or truncated as convenient) at the start of the boot process.\n/tmp Directory The /tmp directory is a directory that stores temporary files and many programs use this directory to create lock files and keep the temporary storage of data.\nDo not delete files under the/tmp directory unless you know exactly what you are doing! Many of these files are critical for presently running programs and removing them may affect a system crash.\n/lib Directory The /lib directory stores all the essential standard libraries required by user binaries in the /bin directory.\n/lost+found Directory The lost+found directory is installed during the installation of Linux, useful for recovering files that may be broken due to unexpected shut-down.\n/srv Directory The /srv directory is the service directory and is abbreviated as ‘srv‘. This directory contains server-specific and service-related files.\nExploring Important file, their location, and their Usability Linux is a complex system that requires a more complex and efficient way to start, stop, maintain and reboot a system, unlike Windows. There is a well-defined configuration file, binaries, man pages, info files, etc. for every process in Linux.\nIn addition to the major directories, here is a list of some of the prominent files and directories and their uses.\n/boot/vmlinuz : The Linux Kernel file. /dev/hda : Device file for the first IDE HDD (Hard Disk Drive). /dev/hdc : Device file for the IDE Cdrom, commonly. /dev/sda: Device file for the first SATA Drive (Hard Disk Drive). /dev/null : A pseudo-device, that doesn’t exist. Sometimes garbage output is redirected to /dev/null, so that it gets lost, forever. /etc/bashrc : This file contains system-wide defaults, functions, and aliases among other files that are used by all the system users. /etc/crontab : This is a system-wide file that is uniquely formatted to schedule or automate system tasks on a Linux system. /etc/exports : A file that determines which file systems are exported to remote hosts and specifies options. /etc/fstab : This is a special file that contains information about all avaiable mount points and mount point options. Each line in this file provides six options, each of which denotes information about a mount point or filesystem. /etc/hosts : This is a configuration file that maps system hostnames to their corresponding IP addresses. /etc/hosts.allow : The file specifies which hosts are permitted to connect to the local system. /etc/host.deny : The file specifies which hosts are denied access and services on the local machine. /etc/issue : Contains a pre-login message. /etc/modules : This file contains the names of kernel modules that should be loaded at boot time, one per line. /etc/motd : motd stands for a message of the day, the message users get upon login. /etc/mtab : A read-only file that contains a list of currently mounted filesystems. /etc/passwd : A file that contains the system user’s information such as the username, UID, GID, and login shell among others /etc/printcap : Contains printer information that is generated by the /etc/cups/printers.conf file. /etc/profile : Contains Linux system-wide environment and other startup scripts. /etc/profile.d : Application script, executed after login. /etc/rc.d : Information about run level specific script. /etc/rc.d/init.d : Run Level Initialisation Script. /etc/resolv.conf : This is a DNS resolver file. It specifies how the system leverages DNS to resolve hostnames. /etc/security : Contains configuration files for various PAM modules. /etc/skel : This is a directory that contains a set of user configuration files that are copied to the user’s home directory when a user is created. /etc/X11 : This is a directory that contains configuration files for the X-window System. /usr/bin : Normal user executable commands. /usr/bin/X11 : This directory contains infinitely nested directories and binaries for the X Windows System. /usr/include : The directory contains header files for C compilers. This includes stdio.h, stdlib.h, and string.h among others. /usr/share : Shared directories of man files, info files, etc. /usr/lib : This directory consists of object files and directories /usr/sbin : The directory contains binaries with superuser privileges or for System Administration. /proc/cpuinfo : The file contains system info including CPU model, model name, number of cores, and clock speed to mention a few files. /proc/interrupts : Information about the current interrupts being utilized currently. /proc/ioports : The file contains all the Input/Output addresses used by devices on the server. /proc/meminfo : A file that stores memory usage information including swap information. /proc/modules : A file that lists all the modules being used by the kernel /proc/mount : The file contains detailed mounted file-system information. /proc/stat : The file contains detailed information about the system and kernel activity. /proc/swaps : The file contains information about the swap file. /proc/version : The file contains Linux version information. /var/log/lastlog : A binary file that contains information about the last successful user logins. /var/log/messages : The file contains a log of messages produced by the syslog daemon at boot. /var/log/syslog : A file that contains non-critical system logs. /var/log/wtmp : A file listing the login time and duration of each user on the system currently. ","permalink":"https://hauptling12.github.io/vimmart/posts/linux-directory-structure-and-important-files-paths-explained/","tags":["Filesystem"],"title":"Linux Directory Structure and Important Files Paths Explained"},{"categories":["Android"],"contents":"This article goes over using ADB Platform Tools and utilizing adb to uninstall packages by using these tools.\nPre-Requisites for Using ADB Setup all of the following to use ADB\nSetup Computer with ADB Platform Tools Windows Install with Chocolatey choco install adb Linux Install with Terminal sudo apt-get install android-tools-adb android-tools-fastboot MacOS Install with Homebrew Homebrew install - ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot; ADB Homebrew Install - brew cask install android-platform-tools Setup Phone for ADB Debugging Open Settings, and select “About”. Tap on “Build number” seven times. Go back, and select “Developer options”. Scroll down, and check the “Android debugging” or “USB debugging” entry under “Debugging”. Plug your device into your computer. On the computer, open up a terminal/command prompt and type adb devices. A dialog should show on your device, asking you to allow usb debugging. Check “always allow”, and choose “OK”. Note: If you don\u0026rsquo;t see this prompt on you device change the usb connection to MTP or File Transfer on the device ADB Commands - These only work when device is booted adb devices - shows all connected adb devices adb shell - launches a shell on the device adb shell pm list packages - list all installed packages on the device adb shell pm list packages -3\u0026quot;|cut -f 2 -d \u0026quot;: - lists all user installed packages adb push \u0026lt;local\u0026gt; \u0026lt;remote\u0026gt; - pushes the file to adb pull \u0026lt;remote\u0026gt; [\u0026lt;local\u0026gt;] - pulls the file to . If isn’t specified, it will pull to the current folder. adb logcat - allows you to view the device log in real-time. You can use adb logcat -b radio to view radio logs, and adb logcat -C to view logs in colour adb install \u0026lt;file\u0026gt; - installs the given .apk file to your device adb uninstall com.packagename - uninstalls package from shell pm list packages Note: if you encounter \u0026ldquo;[DELETE_FAILED_INTERNAL_ERROR]\u0026rdquo; type this to bypass: adb shell pm uninstall --user 0 \u0026lt;appname\u0026gt; adb reboot - reboots system adb reboot bootloader - reboots to bootloader adb reboot recovery - reboots into recovery mode adb reboot fastboot - reboots into fastboot mode Fastboot Commands - These commands work when device is in Bootloader and Fastboot Mode fastboot devices - shows all connected devices fastboot reboot - reboots device - can add bootloader, recovery, and fastboot fastboot oem device-info - shows oem bootloader status (unlocked or locked) fastboot oem unlock - unlocks oem phones - note: aosp and unlocked phones don\u0026rsquo;t need this fastboot flashing unlock - unlocks system for custom rom in pixel and other phones fastboot flashing unlock_critical - unlocks bootloader and system partitions - note: this isn\u0026rsquo;t generally needed fastboot format:ext4 userdata - format userdata on device - note: this will erase your entire device fastboot boot recovery.img - test recovery image without flashing fastboot flash recovery recovery.img - flash recovery image then run fastboot reboot recovery to boot into it. fastboot flash boot boot.img - flash boot image - this is the kernel fastboot -w - wipes device fastboot update \u0026lt;/path/to/your/Rom.zip\u0026gt; - flashes zip to the device ","permalink":"https://hauptling12.github.io/vimmart/posts/how-to-debloat-android/","tags":["ADB"],"title":"How to Debloat Android"},{"categories":["Linux","Windows"],"contents":"Power management is a critical thing to understand in laptops. It\u0026rsquo;s possible to buy an expensive laptop and end up not using it because of bad power management practices.\nThings that effect battery life\n- Frequency adjustment makes massive battery difference. - You can turn of CPU cores independently - Intel P-States are a bit unpredictable. - eGPUs will always drain a battery faster than just APU laptops. Also, not taking care of the thermals on a laptop will lead to less laptop life, shorter battery, and unpleasant heat generation.\nCooling Pad Get any cheap amazon cooling pad from amazon. Here is a decent $30 one with lots of reviews. https://amzn.to/3SV0Y0l\nRedo Thermal Paste By default, almost any and every laptop has excessive thermal compound which leads to higher temperatures. Simply removing the excess compound and apply just a drop of \u0026ldquo;good\u0026rdquo; thermal paste will drop temps by about 10 Celsius.\nHere is an example of excess factory thermal compound application: Adjust Max CPU Frequency Set your CPU governor to the maximum power it can use. I NEVER use a 100% of the CPU and in most instances rarely break above 50% of its total power. Typically, around 2 GHz is perfect for my day-to-day work. When working on battery, I put this down to 25% on a beefy laptop to conserve most of its power. On weaker laptops, you\u0026rsquo;d probably double these numbers. 100% on AC Power and 50% on Battery.\nLinux - cpupower Required Dependencies Install the following packages\ncpupower acpi-support acpid acpi Example Install:\napt-get install acpi-support acpid acpi linux-cpupower cpufrequtils Setting Min/Max Power Example cpupower frequency-set -g powersave -d 0.8G -u 1.2G Check Frequency cpufreq-info Disable Turbo Turbo will draw more power and reduce battery life while increasing CPU temperature.\nRun the following from a root user:\necho 1 \u0026gt; /sys/devices/system/cpu/intel_pstate/no_turbo Turn off CPU Cores The more CPU cores that your laptop uses, the power it will draw. On higher end laptops you can see as big as a 75% savings and extend the battery life x3.\nTaking a CPU core offline (Note: you can\u0026rsquo;t offline cpu0)\necho 0 \u0026gt; /sys/devices/system/cpu/cpu#/online To disable cores above 4 threads, run the following in a bash script:\nfor ((i=4;i\u0026lt;$(nproc);i++)); do echo 0 \u0026gt; /sys/devices/system/cpu/cpu$i/online; done Use CPULIMIT to Constrain Apps Install sudo apt install cpulimit Adjust EXEC commands in .desktop cpulimit --limit 70 /usr/bin/google-chrome-bin Note: This would limit CPU usage for Google Chrome to 70%\nLinux - adjust GPU power There are two methods for adjusting the power usage your GPU uses. I personally use both depending on the laptop, but eGPU\u0026rsquo;s will eat up a battery laptop in no time.\nManually adjust MHz of GPU Set the following variables:\n/sys/class/drm/card0/gt_max_freq_mhz /sys/class/drm/card0/gt_boost_freq_mhz Using cat to display current MHz and then simply echo the new lower value to these variables.\nExample:\necho \u0026#34;1000\u0026#34; \u0026gt; /sys/class/drm/card0/gt_max_freq_mhz Turning off GPU with Prime-select While there are technically 3 options, I recommend only using NVIDIA and intel, as on-demand doesn\u0026rsquo;t work very well.\nTurning off GPU with Envycontrol Cool python project that rebuilds the init system to exclude nvidia.\nhttps://github.com/geminis3/EnvyControl\nWindows - GUI Power Management Launch the GUI power panel with Start ⇾ Run powercfg.cpl\nThen change the Min / Max CPU Power. I typically set these to 5% Min and 50% Max, but on weaker laptops you can set these higher.\nWindows - AutoHotkey Script This script sets the max CPU state when plugged in to the wall (AC Power) and when it runs on battery (DC Power).\nPowerWriteProcessorStateValueIndex(50, \u0026#34;AC\u0026#34;) PowerWriteProcessorStateValueIndex(25, \u0026#34;DC\u0026#34;) ExitApp ;--------------------- PowerWriteProcessorStateValueIndex(Max := \u0026#34;\u0026#34;, Mode := \u0026#34;\u0026#34;) { l:=PowerEnumeratePlans(ActivePlan), VarSetCapacity(GUID_ACTIVE_POWER_SAVING, 16, 0), VarSetCapacity(GUID_PROCESSOR_SETTINGS_SUBGROUP, 16, 0) , DllCall(\u0026#34;Ole32.dll\\CLSIDFromString\u0026#34;, \u0026#34;WStr\u0026#34;, \u0026#34;{\u0026#34; ActivePlan.GUID \u0026#34;}\u0026#34;, \u0026#34;Ptr\u0026#34;, \u0026amp;GUID_ACTIVE_POWER_SAVING), VarSetCapacity(GUID_PROCESSOR_THROTTLE_MAXIMUM, 16, 0) , DllCall(\u0026#34;Ole32.dll\\CLSIDFromString\u0026#34;, \u0026#34;WStr\u0026#34;, \u0026#34;{54533251-82be-4824-96c1-47b60b740d00}\u0026#34;, \u0026#34;Ptr\u0026#34;, \u0026amp;GUID_PROCESSOR_SETTINGS_SUBGROUP) , DllCall(\u0026#34;Ole32.dll\\CLSIDFromString\u0026#34;, \u0026#34;WStr\u0026#34;, \u0026#34;{BC5038F7-23E0-4960-96DA-33ABAF5935EC}\u0026#34;, \u0026#34;Ptr\u0026#34;, \u0026amp;GUID_PROCESSOR_THROTTLE_MAXIMUM) , DllCall(\u0026#34;PowrProf.dll\\PowerWrite\u0026#34; Mode \u0026#34;ValueIndex\u0026#34;, \u0026#34;Ptr\u0026#34;, 0, \u0026#34;Ptr\u0026#34;, \u0026amp;GUID_ACTIVE_POWER_SAVING , \u0026#34;Ptr\u0026#34;, \u0026amp;GUID_PROCESSOR_SETTINGS_SUBGROUP, \u0026#34;Ptr\u0026#34;, \u0026amp;GUID_PROCESSOR_THROTTLE_MAXIMUM, \u0026#34;UInt\u0026#34;, Max, \u0026#34;UInt\u0026#34;) for k, v in l if !(v.Default) { RunWait, % ComSpec \u0026#34; /c powercfg /s \u0026#34; v.GUID,, Hide break } RunWait, % ComSpec \u0026#34; /c powercfg /s \u0026#34; ActivePlan.GUID,, Hide } ;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ;enumerates all power plans ;for k, v in PowerEnumeratePlans() ;\tMsgBox % \u0026#34;#\u0026#34; k \u0026#34;`nGUID: \u0026#34; v.GUID \u0026#34;`Name: \u0026#34; v.Name \u0026#34;`nDefault?: \u0026#34; v.Default PowerEnumeratePlans(ByRef ActivePlan := \u0026#34;\u0026#34;) { List := {} for k, v in StrSplit(CMD(\u0026#34;powercfg /l\u0026#34;), \u0026#34;:\u0026#34;, A_Space A_Tab) if (A_Index\u0026gt;1) { Info := {}, Info.GUID := SubStr(Trim(v), 1, 36), Info.Default := !!InStr(v, \u0026#34;*\u0026#34;) , Info.Name := Trim(StrSplit(SubStr(v, InStr(v, \u0026#34;(\u0026#34;)+1), \u0026#34;)\u0026#34;)[1]), List.Push(Info) if (Info.Default) ActivePlan := Info } return List } ;executes cmd command and return the result CMD(CMD := \u0026#34;\u0026#34;, Encoding := \u0026#34;UTF-8\u0026#34;, ByRef ExitCode := \u0026#34;\u0026#34;) { DllCall(\u0026#34;Kernel32.dll\\CreatePipe\u0026#34;, \u0026#34;PtrP\u0026#34;, hReadPipe, \u0026#34;PtrP\u0026#34;, hWritePipe, \u0026#34;Ptr\u0026#34;, 0, \u0026#34;UInt\u0026#34;, 0) , DllCall(\u0026#34;Kernel32.dll\\SetHandleInformation\u0026#34;, \u0026#34;Ptr\u0026#34;, hWritePipe, \u0026#34;UInt\u0026#34;, 1, \u0026#34;UInt\u0026#34;, 1) , Size := VarSetCapacity(STARTUPINFO, A_PtrSize=4?68:104, 0), NumPut(Size, STARTUPINFO, 0, \u0026#34;UInt\u0026#34;) , NumPut(0x100, STARTUPINFO, A_PtrSize=4?44:60, \u0026#34;UInt\u0026#34;), NumPut(hStdInRd, STARTUPINFO, A_PtrSize=4?56:80, \u0026#34;Ptr\u0026#34;) , NumPut(hWritePipe, STARTUPINFO, A_PtrSize=4?60:88, \u0026#34;Ptr\u0026#34;), NumPut(hWritePipe, STARTUPINFO, A_PtrSize=4?64:96, \u0026#34;Ptr\u0026#34;) , pi := CreateProcess(, ComSpec \u0026#34; /c \u0026#34; CMD,,,, 0x08000000,,, \u0026amp;STARTUPINFO) , DllCall(\u0026#34;Kernel32.dll\\CloseHandle\u0026#34;, \u0026#34;Ptr\u0026#34;, hWritePipe), Size := VarSetCapacity(Buff, 4095) while DllCall(\u0026#34;Kernel32.dll\\ReadFile\u0026#34;, \u0026#34;Ptr\u0026#34;, hReadPipe, \u0026#34;Ptr\u0026#34;, \u0026amp;Buff, \u0026#34;UInt\u0026#34;, Size, \u0026#34;PtrP\u0026#34;, Bytes, \u0026#34;Ptr\u0026#34;, 0) OutputVar .= StrGet(\u0026amp;Buff, Bytes, Encoding) DllCall(\u0026#34;Kernel32.dll\\CloseHandle\u0026#34;, \u0026#34;Ptr\u0026#34;, pi.handle), DllCall(\u0026#34;Kernel32.dll\\CloseHandle\u0026#34;, \u0026#34;Ptr\u0026#34;, hReadPipe) return OutputVar, DllCall(\u0026#34;Kernel32.dll\\GetExitCodeProcess\u0026#34;, \u0026#34;Ptr\u0026#34;, pi.handle, \u0026#34;UIntP\u0026#34;, ExitCode) } CreateProcess(ApplicationName := \u0026#34;\u0026#34;, ByRef CommandLine := \u0026#34;\u0026#34;, ProcessAttributes := 0, ThreadAttributes := 0, InheritHandles := true, CreationFlags := 0x08000000, Environment := 0, CurrentDirectory := \u0026#34;\u0026#34;, StartupInfo := 0) { VarSetCapacity(PROCESS_INFORMATION, A_PtrSize=4?16:24, 0) , r := DllCall(\u0026#34;Kernel32.dll\\CreateProcess\u0026#34;, \u0026#34;Ptr\u0026#34;, ApplicationName=\u0026#34;\u0026#34;?0:\u0026amp;ApplicationName, \u0026#34;Ptr\u0026#34;, CommandLine=\u0026#34;\u0026#34;?0:\u0026amp;CommandLine , \u0026#34;Ptr\u0026#34;, ProcessAttributes, \u0026#34;Ptr\u0026#34;, ThreadAttributes, \u0026#34;Int\u0026#34;, !!InheritHandles, \u0026#34;UInt\u0026#34;, CreationFlags, \u0026#34;Ptr\u0026#34;, Environment, \u0026#34;Ptr\u0026#34;, CurrentDirectory=\u0026#34;\u0026#34;?0:\u0026amp;CurrentDirectory , \u0026#34;Ptr\u0026#34;, StartupInfo, \u0026#34;Ptr\u0026#34;, \u0026amp;PROCESS_INFORMATION) return r?{HANDLE: NumGet(PROCESS_INFORMATION, 0, \u0026#34;Ptr\u0026#34;), hThread: NumGet(PROCESS_INFORMATION, A_PtrSize, \u0026#34;Ptr\u0026#34;) , ID: NumGet(PROCESS_INFORMATION, A_PtrSize=4?8:16, \u0026#34;Ptr\u0026#34;), ThreadID: NumGet(PROCESS_INFORMATION, A_PtrSize=4?12:24, \u0026#34;Ptr\u0026#34;)}:0, ErrorLevel := !r } ","permalink":"https://hauptling12.github.io/vimmart/posts/laptop-power-management/","tags":["Power Management"],"title":"Laptop Power Management"}]